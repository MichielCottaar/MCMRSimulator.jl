var documenterSearchIndex = {"docs":
[{"location":"references/#References","page":"References","title":"References","text":"","category":"section"},{"location":"references/","page":"References","title":"References","text":"Callaghan, R.; Alexander, D. C.; Palombo, M. and Zhang, H. (2020). Config: Contextual Fibre Growth to Generate Realistic Axonal Packing for Diffusion Mri Simulation. NeuroImage 220, 117107.\n\n\n\nGinsburger, K.; Matuschke, F.; Poupon, F.; Mangin, J.-F. c.; Axer, M. and Poupon, C. (2019). MEDUSA: A GPU-based Tool to Create Realistic Phantoms of the Brain Microstructure Using Tiny Spheres. Neuroimage 193, 10–24.\n\n\n\nPalombo, M.; Alexander, D. C. and Zhang, H. (2019). A Generative Model of Realistic Brain Cells with Application to Numerical Simulation of the Diffusion-Weighted MR Signal. NeuroImage 188, 391–402. Accessed on Nov 16, 2022.\n\n\n\nRubeck, C.; Yonnet, J.-P.; Allag, H.; Delinchant, B. and Chadebec, O. (2013). Analytical Calculation of Magnet Systems: Magnetic Field Created by Charged Triangles and Polyhedra. IEEE Transactions on Magnetics 49, 144–147. Accessed on Aug 21, 2023.\n\n\n\nSchenck, J. F. (1996). The Role of Magnetic Susceptibility in Magnetic Resonance Imaging: Mri Magnetic Compatibility of the First and Second Kinds. Medical Physics 23, 815–850.\n\n\n\nWharton, S. and Bowtell, R. (2012). Fiber Orientation-Dependent White Matter Contrast in Gradient Echo MRI. Proceedings of the National Academy of Sciences of the United States of America 109, 18559–64.\n\n\n\nVillarreal-Haro, J. L.; Gardier, R.; Canales-Rodríguez, E. J.; Fischi-Gomez, E.; Girard, G.; Thiran, J.-P. and Rafael-Patiño, J. (2023). CACTUS: A Computational Framework for Generating Realistic White Matter Microstructure Substrates. Frontiers in Neuroinformatics 17. Accessed on Aug 22, 2023.\n\n\n\n","category":"page"},{"location":"api/","page":"API","title":"API","text":"CurrentModule = MCMRSimulator","category":"page"},{"location":"api/#api","page":"API","title":"MCMRSimulator.jl API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"This is the API for MCMRSimulator. For a more user-friendly introduction, click here.","category":"page"},{"location":"api/","page":"API","title":"API","text":"","category":"page"},{"location":"api/","page":"API","title":"API","text":"Modules = [\n    MCMRSimulator,\n    MCMRSimulator.Constants,\n    MCMRSimulator.Methods,\n    MCMRSimulator.Properties,\n    MCMRSimulator.Geometries,\n    MCMRSimulator.Geometries.User,\n    MCMRSimulator.Geometries.User.Obstructions,\n    MCMRSimulator.Geometries.User.Obstructions.Fields,\n    MCMRSimulator.Geometries.User.Obstructions.ObstructionTypes,\n    MCMRSimulator.Geometries.User.Obstructions.ObstructionGroups,\n    MCMRSimulator.Geometries.User.Fix,\n    MCMRSimulator.Geometries.User.FixSusceptibility,\n    MCMRSimulator.Geometries.User.LoadMesh,\n    MCMRSimulator.Geometries.User.RandomDistribution,\n    MCMRSimulator.Geometries.User.SplitMesh,\n    MCMRSimulator.Geometries.User.JSON,\n    MCMRSimulator.Geometries.User.ToMesh,\n    MCMRSimulator.Geometries.User.SizeScales,\n    MCMRSimulator.Geometries.Internal,\n    MCMRSimulator.Geometries.Internal.RayGridIntersection,\n    MCMRSimulator.Geometries.Internal.BoundingBoxes,\n    MCMRSimulator.Geometries.Internal.Obstructions,\n    MCMRSimulator.Geometries.Internal.Obstructions.ObstructionIntersections,\n    MCMRSimulator.Geometries.Internal.Obstructions.FixedObstructions,\n    MCMRSimulator.Geometries.Internal.Obstructions.Walls,\n    MCMRSimulator.Geometries.Internal.Obstructions.Rounds,\n    MCMRSimulator.Geometries.Internal.Obstructions.Triangles,\n    MCMRSimulator.Geometries.Internal.Obstructions.Shifts,\n    MCMRSimulator.Geometries.Internal.Intersections,\n    MCMRSimulator.Geometries.Internal.Reflections,\n    MCMRSimulator.Geometries.Internal.FixedObstructionGroups,\n    MCMRSimulator.Geometries.Internal.HitGrids,\n    MCMRSimulator.Geometries.Internal.Properties,\n    MCMRSimulator.Geometries.Internal.Susceptibility,\n    MCMRSimulator.Geometries.Internal.Susceptibility.Base,\n    MCMRSimulator.Geometries.Internal.Susceptibility.Cylinder,\n    MCMRSimulator.Geometries.Internal.Susceptibility.Annulus,\n    MCMRSimulator.Geometries.Internal.Susceptibility.Triangle,\n    MCMRSimulator.Geometries.Internal.Susceptibility.Grid,\n    MCMRSimulator.Spins,\n    MCMRSimulator.TimeSteps,\n    MCMRSimulator.Relax,\n    MCMRSimulator.SequenceParts,\n    MCMRSimulator.Simulations,\n    MCMRSimulator.Subsets,\n    MCMRSimulator.Evolve,\n    MCMRSimulator.Plot,\n    MCMRSimulator.CLI,\n    MCMRSimulator.CLI.Geometry,\n    MCMRSimulator.CLI.Run,\n]","category":"page"},{"location":"api/#MCMRSimulator.MCMRSimulator","page":"API","title":"MCMRSimulator.MCMRSimulator","text":"This package supports the running of MR Monte Carlo simulations.\n\nIn these simulations hundreds of thousands or millions of Spin particles randomly diffuse through some tissue microstructure. At each timepoint these spins are represented as a Snapshot object. The spin diffusion is constrained by an ObstructionGroup (represented internally as FixedGeometry) The spins of these particles will be evolved based on the Bloch equations with the field strength and relaxation rates set by the local geometry and the effect of one or more Sequence objects. All these variables are combined into a single Simulation object.  See Simulation for how to run the simulation.\n\nPlotting support for the sequence and resulting signal is also available based on Makie.jl.\n\n\n\n\n\n","category":"module"},{"location":"api/#MCMRSimulator.Constants.gyromagnetic_ratio","page":"API","title":"MCMRSimulator.Constants.gyromagnetic_ratio","text":"gyromagnetic ratio of a proton (1H) in water in kHz/T\n\n\n\n\n\n","category":"constant"},{"location":"api/#MCMRSimulator.Methods","page":"API","title":"MCMRSimulator.Methods","text":"Defines methods shared across multiple sub-modules.\n\n\n\n\n\n","category":"module"},{"location":"api/#MCMRSimulator.Methods.B0","page":"API","title":"MCMRSimulator.Methods.B0","text":"B0(scanner)\nB0(sequence)\n\nReturns the magnetic field strength of the scanner in Tesla.\n\n\n\n\n\n","category":"function"},{"location":"api/#MCMRSimulator.Methods.get_rotation-Tuple{Rotations.Rotation, Int64}","page":"API","title":"MCMRSimulator.Methods.get_rotation","text":"get_rotation(rotation_mat, ndim)\n\nReturns a (3, ndim) rotation matrix, that is the relevant part of the full 3x3 rotation_mat to map to the x-axis (if ndim is 1) or the x-y plance (if ndim is 2). If ndim is 3, the full rotation matrix rotation_mat is returned.\n\nget_rotation(vector, ndim; reference_dimension)\n\nReturns the (3, ndim) rotation matrix mapping the vector to the reference_dimension. By default, the reference_dimension is the x-direction (ifndimis 1 or 3) or the z-direction (ifndimis 2).vectorandreference_dimension` can be a length 3 array or one of the symbols :x, :y, or :z (representing vectors in those cardinal directions).\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.Methods.get_time","page":"API","title":"MCMRSimulator.Methods.get_time","text":"get_time(snapshot)\nget_time(sequence_component)\nget_time(sequence, sequence_index)\n\nReturns the time in milliseconds that a snapshot was taken or that a sequence component will have effect.\n\n\n\n\n\n","category":"function"},{"location":"api/#MCMRSimulator.Methods.norm_angle-Tuple{Any}","page":"API","title":"MCMRSimulator.Methods.norm_angle","text":"norm_angle(angle)\n\nNormalises an angle in degrees, so that it is between it is in the range (-180, 180]\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.Properties","page":"API","title":"MCMRSimulator.Properties","text":"Types:\n\nGlobalProperties\n\nMethods:\n\nR1\nR2\noff_resonance\ncorrect_for_timestep\nstick_probability\n\n\n\n\n\n","category":"module"},{"location":"api/#MCMRSimulator.Properties.GlobalProperties","page":"API","title":"MCMRSimulator.Properties.GlobalProperties","text":"GlobalProperties(; R1=0, R2=0, off_resonance=0, permeability=0, dwell_time=0, surface_density=0, surface_relaxivity=0)\n\nStores global MRI and collision properties.\n\n\n\n\n\n","category":"type"},{"location":"api/#MCMRSimulator.Properties.correct_for_timestep-Tuple{Any, Any}","page":"API","title":"MCMRSimulator.Properties.correct_for_timestep","text":"correct_for_timestep(surface_relaxivity/permeability, timestep)\n\nCorrects the surface relaxivity or permeability for the variability in the timestep during the simulation.\n\nIn Monte Carlo simulations the rate of collisions depends on the size of the timestep. This means that as the timestep changes, the effect of surface relaxivity and permeability will depend on the timestep. This function corrects the surface relaxivity and permeability values, so that their effect does not depend on timestep. The user-provided surface relaxivity and permeability will be used unaltered if the timestep is 1 milliseconds.\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.Properties.stick_probability-NTuple{4, Number}","page":"API","title":"MCMRSimulator.Properties.stick_probability","text":"stick_probability(surface_density, dwell_time, diffusivity, timestep)\nstick_probability(properties, diffusivity, timestep)\n\nComputes the probability of a spin getting stuck at the surface given a surface_density and dwell_time as well as the diffusivity (in um^2/ms) and the timestep (in ms).\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.Geometries","page":"API","title":"MCMRSimulator.Geometries","text":"Defines the microstructural environment with which the spins interact.\n\n\n\n\n\n","category":"module"},{"location":"api/#MCMRSimulator.Geometries.User","page":"API","title":"MCMRSimulator.Geometries.User","text":"User interface for defining geometry.\n\n\n\n\n\n","category":"module"},{"location":"api/#MCMRSimulator.Geometries.User.Obstructions.Annuli","page":"API","title":"MCMRSimulator.Geometries.User.Obstructions.Annuli","text":"MCMRSimulator.Geometries.User.Obstructions.ObstructionGroups.ObstructionGroup{:Annuli})(; fields...)\n\nCreates a set of Annulus objects. Fields can be set using keyword arguments. The following fields are available:\n\ninner: Radius of the inner cylinder. Field is required. Expected type: Float64.\nouter: Radius of the outer cylinder. Field is required. Expected type: Float64.\nmyelin: Whether the annulus is myelinated. Field is required. Expected type: Bool.  default value: false\nrotation: Rotation applied to all obstructions in group. Can be set to a matrix or one of :x, :y, or, :z (see get_rotation). Field is required. Expected type: StaticArraysCore.SMatrix{3, 2, Float64, 6}.  default value: [1.0 0.0; 0.0 1.0; 0.0 0.0]\nR1_inner_surface: Additional longitudinal relaxation rate (kHz). Inner_surface property. Field is required. Expected type: Float64.  default value: 0.0\nR1_outer_surface: Additional longitudinal relaxation rate (kHz). Outer_surface property. Field is required. Expected type: Float64.  default value: 0.0\nR1_inner_volume: Additional longitudinal relaxation rate (kHz). Inner_volume property. Field is required. Expected type: Float64.  default value: 0.0\nR1_outer_volume: Additional longitudinal relaxation rate (kHz). Outer_volume property. Field is required. Expected type: Float64.  default value: 0.0\nR2_inner_surface: Additional transverse relaxation rate (kHz). Inner_surface property. Field is required. Expected type: Float64.  default value: 0.0\nR2_outer_surface: Additional transverse relaxation rate (kHz). Outer_surface property. Field is required. Expected type: Float64.  default value: 0.0\nR2_inner_volume: Additional transverse relaxation rate (kHz). Inner_volume property. Field is required. Expected type: Float64.  default value: 0.0\nR2_outer_volume: Additional transverse relaxation rate (kHz). Outer_volume property. Field is required. Expected type: Float64.  default value: 0.0\noff_resonance_inner_surface: Additional off-resonance field offset (kHz). Inner_surface property. Field is required. Expected type: Float64.  default value: 0.0\noff_resonance_outer_surface: Additional off-resonance field offset (kHz). Outer_surface property. Field is required. Expected type: Float64.  default value: 0.0\noff_resonance_inner_volume: Additional off-resonance field offset (kHz). Inner_volume property. Field is required. Expected type: Float64.  default value: 0.0\noff_resonance_outer_volume: Additional off-resonance field offset (kHz). Outer_volume property. Field is required. Expected type: Float64.  default value: 0.0\nposition: Spatial offset of obstruction from origin. Field is required. Expected type: StaticArraysCore.MVector{2, Float64}.  default value: [0.0, 0.0]\nsusceptibility_iso: Isotropic component of the myelin susceptibility (in ppm). Field can be null. Expected type: Float64.  default value: -0.1\nsusceptibility_aniso: Anisotropic component of the myelin susceptibility (in ppm). Field can be null. Expected type: Float64.  default value: -0.1\nlorentz_radius: Only compute field explicitly for a annuli with this Lorentz radius. Field can be null. Expected type: Float64.  default value: 5.0\nrepeats: Length scale on which the obstructions are repeated (um). Field can be null. Expected type: StaticArraysCore.MVector{2, Float64}.\nuse_boundingbox: Use bounding boxes for an initial filtering of possible intersections. Field can be null. Expected type: Bool.  default value: true\ngrid_resolution: Resolution of the grid that the volume is split up into (um). Defaults to roughly one grid element per obstruction. Field can be null. Expected type: Float64.\ndwell_time_inner_surface: Average time a particle stays stuck to the surface (ms). Inner_surface property. Field can be null. Expected type: Float64.\ndwell_time_outer_surface: Average time a particle stays stuck to the surface (ms). Outer_surface property. Field can be null. Expected type: Float64.\ndensity_inner_surface: Surface density of stuck particles relative to the volume density (um). Inner_surface property. Field can be null. Expected type: Float64.\ndensity_outer_surface: Surface density of stuck particles relative to the volume density (um). Outer_surface property. Field can be null. Expected type: Float64.\npermeability_inner_surface: Probability of particle passing through the obstruction. Inner_surface property. Field can be null. Expected type: Float64.\npermeability_outer_surface: Probability of particle passing through the obstruction. Outer_surface property. Field can be null. Expected type: Float64.\nrelaxivity_inner_surface: Fraction of transverse spin lost each time it hits the obstruction. Inner_surface property. Field can be null. Expected type: Float64.\nrelaxivity_outer_surface: Fraction of transverse spin lost each time it hits the obstruction. Outer_surface property. Field can be null. Expected type: Float64.\nsize_scale: Size of the smallest obstructions. If not set explicitly, this will be determined by the minimum radius or distance between objects (see size_scale). Field can be null. Expected type: Float64.\n\n\n\n\n\n","category":"type"},{"location":"api/#MCMRSimulator.Geometries.User.Obstructions.BendyCylinder","page":"API","title":"MCMRSimulator.Geometries.User.Obstructions.BendyCylinder","text":"MCMRSimulator.Geometries.User.Obstructions.ObstructionGroups.ObstructionGroup{:BendyCylinder})(; fields...)\n\nCreates a set of Ring objects. Fields can be set using keyword arguments. The following fields are available:\n\ncontrol_point: Control points defining the path of the cylinder. Field is required. Expected type: StaticArraysCore.MVector{3, Float64}.\nradius: Radius at each control point. Field is required. Expected type: Float64.\nspline_order: Sets the order of the b-spine interpolating between control points. Field is required. Expected type: Int64.  default value: 3\nmyelin: Whether the cylinder is myelinated. Field is required. Expected type: Bool.  default value: false\nrotation: Rotation applied to all obstructions in group. Can be set to a matrix or one of :x, :y, or, :z (see get_rotation). Field is required. Expected type: StaticArraysCore.SMatrix{3, 3, Float64, 9}.  default value: [1.0 0.0 0.0; 0.0 1.0 0.0; 0.0 0.0 1.0]\nR1_surface: Additional longitudinal relaxation rate (kHz). Surface property. Field is required. Expected type: Float64.  default value: 0.0\nR1_inside: Additional longitudinal relaxation rate (kHz). Inside property. Field is required. Expected type: Float64.  default value: 0.0\nR2_surface: Additional transverse relaxation rate (kHz). Surface property. Field is required. Expected type: Float64.  default value: 0.0\nR2_inside: Additional transverse relaxation rate (kHz). Inside property. Field is required. Expected type: Float64.  default value: 0.0\noff_resonance_surface: Additional off-resonance field offset (kHz). Surface property. Field is required. Expected type: Float64.  default value: 0.0\noff_resonance_inside: Additional off-resonance field offset (kHz). Inside property. Field is required. Expected type: Float64.  default value: 0.0\nnsamples: Number of mesh vertices along each ring. Field can be null. Expected type: Int64.  default value: 100\nclosed: After how many repeats in each dimension does the cylinder connect with itself. If not set the cylinder is not closed. Field can be null. Expected type: StaticArraysCore.MVector{3, Int64}.\nsusceptibility_iso: Isotropic component of the myelin susceptibility (in ppm). Field can be null. Expected type: Float64.  default value: -0.1\nsusceptibility_aniso: Anisotropic component of the myelin susceptibility (in ppm). Field can be null. Expected type: Float64.  default value: -0.1\nlorentz_radius: Only compute field explicitly for triangles with this Lorentz radius. Field can be null. Expected type: Float64.  default value: 5.0\nrepeats: Length scale on which the obstructions are repeated (um). Field can be null. Expected type: StaticArraysCore.MVector{3, Float64}.\nuse_boundingbox: Use bounding boxes for an initial filtering of possible intersections. Field can be null. Expected type: Bool.  default value: true\ngrid_resolution: Resolution of the grid that the volume is split up into (um). Defaults to roughly one grid element per obstruction. Field can be null. Expected type: Float64.\ndwell_time: Average time a particle stays stuck to the surface (ms). Surface property. Field can be null. Expected type: Float64.\ndensity: Surface density of stuck particles relative to the volume density (um). Surface property. Field can be null. Expected type: Float64.\npermeability: Probability of particle passing through the obstruction. Surface property. Field can be null. Expected type: Float64.\nrelaxivity: Fraction of transverse spin lost each time it hits the obstruction. Surface property. Field can be null. Expected type: Float64.\nsize_scale: Size of the smallest obstructions. If not set explicitly, this will be determined by the minimum radius or distance between objects (see size_scale). Field can be null. Expected type: Float64.\n\n\n\n\n\n","category":"type"},{"location":"api/#MCMRSimulator.Geometries.User.Obstructions.Cylinders","page":"API","title":"MCMRSimulator.Geometries.User.Obstructions.Cylinders","text":"MCMRSimulator.Geometries.User.Obstructions.ObstructionGroups.ObstructionGroup{:Cylinders})(; fields...)\n\nCreates a set of Cylinder objects. Fields can be set using keyword arguments. The following fields are available:\n\nradius: Radius of the cylinder. Field is required. Expected type: Float64.\nrotation: Rotation applied to all obstructions in group. Can be set to a matrix or one of :x, :y, or, :z (see get_rotation). Field is required. Expected type: StaticArraysCore.SMatrix{3, 2, Float64, 6}.  default value: [1.0 0.0; 0.0 1.0; 0.0 0.0]\nR1_surface: Additional longitudinal relaxation rate (kHz). Surface property. Field is required. Expected type: Float64.  default value: 0.0\nR1_inside: Additional longitudinal relaxation rate (kHz). Inside property. Field is required. Expected type: Float64.  default value: 0.0\nR2_surface: Additional transverse relaxation rate (kHz). Surface property. Field is required. Expected type: Float64.  default value: 0.0\nR2_inside: Additional transverse relaxation rate (kHz). Inside property. Field is required. Expected type: Float64.  default value: 0.0\noff_resonance_surface: Additional off-resonance field offset (kHz). Surface property. Field is required. Expected type: Float64.  default value: 0.0\noff_resonance_inside: Additional off-resonance field offset (kHz). Inside property. Field is required. Expected type: Float64.  default value: 0.0\nposition: Spatial offset of obstruction from origin. Field is required. Expected type: StaticArraysCore.MVector{2, Float64}.  default value: [0.0, 0.0]\ng_ratio: Inner/outer radius used for susceptibility calculation Field can be null. Expected type: Float64.  default value: 1.0\nsusceptibility_iso: Isotropic component of the susceptibility (in ppm). Field can be null. Expected type: Float64.  default value: -0.1\nsusceptibility_aniso: Anisotropic component of the susceptibility (in ppm). Field can be null. Expected type: Float64.  default value: -0.1\nlorentz_radius: Only compute field explicitly for cylinders with this Lorentz radius. Field can be null. Expected type: Float64.  default value: 5.0\nrepeats: Length scale on which the obstructions are repeated (um). Field can be null. Expected type: StaticArraysCore.MVector{2, Float64}.\nuse_boundingbox: Use bounding boxes for an initial filtering of possible intersections. Field can be null. Expected type: Bool.  default value: true\ngrid_resolution: Resolution of the grid that the volume is split up into (um). Defaults to roughly one grid element per obstruction. Field can be null. Expected type: Float64.\ndwell_time: Average time a particle stays stuck to the surface (ms). Surface property. Field can be null. Expected type: Float64.\ndensity: Surface density of stuck particles relative to the volume density (um). Surface property. Field can be null. Expected type: Float64.\npermeability: Probability of particle passing through the obstruction. Surface property. Field can be null. Expected type: Float64.\nrelaxivity: Fraction of transverse spin lost each time it hits the obstruction. Surface property. Field can be null. Expected type: Float64.\nsize_scale: Size of the smallest obstructions. If not set explicitly, this will be determined by the minimum radius or distance between objects (see size_scale). Field can be null. Expected type: Float64.\n\n\n\n\n\n","category":"type"},{"location":"api/#MCMRSimulator.Geometries.User.Obstructions.Mesh","page":"API","title":"MCMRSimulator.Geometries.User.Obstructions.Mesh","text":"MCMRSimulator.Geometries.User.Obstructions.ObstructionGroups.ObstructionGroup{:Mesh})(; fields...)\n\nCreates a set of Triangle objects. Fields can be set using keyword arguments. The following fields are available:\n\ntriangles: Each triangle is defined by 3 vertices into the mesh. Field is required. Expected type: StaticArraysCore.MVector{3, Int64}.\nvertices: Positions of the corners of the triangular mesh. Field is required. Expected type: Vector{StaticArraysCore.MVector{3, Float64}}.\nmyelin: Whether the mesh is myelinated. Field is required. Expected type: Bool.  default value: false\nrotation: Rotation applied to all obstructions in group. Can be set to a matrix or one of :x, :y, or, :z (see get_rotation). Field is required. Expected type: StaticArraysCore.SMatrix{3, 3, Float64, 9}.  default value: [1.0 0.0 0.0; 0.0 1.0 0.0; 0.0 0.0 1.0]\nR1_surface: Additional longitudinal relaxation rate (kHz). Surface property. Field is required. Expected type: Float64.  default value: 0.0\nR1_inside: Additional longitudinal relaxation rate (kHz). Inside property. Field is required. Expected type: Float64.  default value: 0.0\nR2_surface: Additional transverse relaxation rate (kHz). Surface property. Field is required. Expected type: Float64.  default value: 0.0\nR2_inside: Additional transverse relaxation rate (kHz). Inside property. Field is required. Expected type: Float64.  default value: 0.0\noff_resonance_surface: Additional off-resonance field offset (kHz). Surface property. Field is required. Expected type: Float64.  default value: 0.0\noff_resonance_inside: Additional off-resonance field offset (kHz). Inside property. Field is required. Expected type: Float64.  default value: 0.0\nsusceptibility_iso: Isotropic component of the myelin susceptibility (in ppm). Field can be null. Expected type: Float64.  default value: -0.1\nsusceptibility_aniso: Anisotropic component of the myelin susceptibility (in ppm). Field can be null. Expected type: Float64.  default value: -0.1\nlorentz_radius: Only compute field explicitly for triangles with this Lorentz radius. Field can be null. Expected type: Float64.  default value: 5.0\ncomponents: Which component this triangle belongs to. If not provided explicitly, this will be determined based on connectivity. Field can be null. Expected type: Int64.\nrepeats: Length scale on which the obstructions are repeated (um). Field can be null. Expected type: StaticArraysCore.MVector{3, Float64}.\nuse_boundingbox: Use bounding boxes for an initial filtering of possible intersections. Field can be null. Expected type: Bool.  default value: true\ngrid_resolution: Resolution of the grid that the volume is split up into (um). Defaults to roughly one grid element per obstruction. Field can be null. Expected type: Float64.\ndwell_time: Average time a particle stays stuck to the surface (ms). Surface property. Field can be null. Expected type: Float64.\ndensity: Surface density of stuck particles relative to the volume density (um). Surface property. Field can be null. Expected type: Float64.\npermeability: Probability of particle passing through the obstruction. Surface property. Field can be null. Expected type: Float64.\nrelaxivity: Fraction of transverse spin lost each time it hits the obstruction. Surface property. Field can be null. Expected type: Float64.\nsize_scale: Size of the smallest obstructions. If not set explicitly, this will be determined by the minimum radius or distance between objects (see size_scale). Field can be null. Expected type: Float64.\n\n\n\n\n\n","category":"type"},{"location":"api/#MCMRSimulator.Geometries.User.Obstructions.Spheres","page":"API","title":"MCMRSimulator.Geometries.User.Obstructions.Spheres","text":"MCMRSimulator.Geometries.User.Obstructions.ObstructionGroups.ObstructionGroup{:Spheres})(; fields...)\n\nCreates a set of Sphere objects. Fields can be set using keyword arguments. The following fields are available:\n\nradius: Radius of the cylinder. Field is required. Expected type: Float64.\nrotation: Rotation applied to all obstructions in group. Can be set to a matrix or one of :x, :y, or, :z (see get_rotation). Field is required. Expected type: StaticArraysCore.SMatrix{3, 3, Float64, 9}.  default value: [1.0 0.0 0.0; 0.0 1.0 0.0; 0.0 0.0 1.0]\nR1_surface: Additional longitudinal relaxation rate (kHz). Surface property. Field is required. Expected type: Float64.  default value: 0.0\nR1_inside: Additional longitudinal relaxation rate (kHz). Inside property. Field is required. Expected type: Float64.  default value: 0.0\nR2_surface: Additional transverse relaxation rate (kHz). Surface property. Field is required. Expected type: Float64.  default value: 0.0\nR2_inside: Additional transverse relaxation rate (kHz). Inside property. Field is required. Expected type: Float64.  default value: 0.0\noff_resonance_surface: Additional off-resonance field offset (kHz). Surface property. Field is required. Expected type: Float64.  default value: 0.0\noff_resonance_inside: Additional off-resonance field offset (kHz). Inside property. Field is required. Expected type: Float64.  default value: 0.0\nposition: Spatial offset of obstruction from origin. Field is required. Expected type: StaticArraysCore.MVector{3, Float64}.  default value: [0.0, 0.0, 0.0]\nrepeats: Length scale on which the obstructions are repeated (um). Field can be null. Expected type: StaticArraysCore.MVector{3, Float64}.\nuse_boundingbox: Use bounding boxes for an initial filtering of possible intersections. Field can be null. Expected type: Bool.  default value: true\ngrid_resolution: Resolution of the grid that the volume is split up into (um). Defaults to roughly one grid element per obstruction. Field can be null. Expected type: Float64.\ndwell_time: Average time a particle stays stuck to the surface (ms). Surface property. Field can be null. Expected type: Float64.\ndensity: Surface density of stuck particles relative to the volume density (um). Surface property. Field can be null. Expected type: Float64.\npermeability: Probability of particle passing through the obstruction. Surface property. Field can be null. Expected type: Float64.\nrelaxivity: Fraction of transverse spin lost each time it hits the obstruction. Surface property. Field can be null. Expected type: Float64.\nsize_scale: Size of the smallest obstructions. If not set explicitly, this will be determined by the minimum radius or distance between objects (see size_scale). Field can be null. Expected type: Float64.\n\n\n\n\n\n","category":"type"},{"location":"api/#MCMRSimulator.Geometries.User.Obstructions.Walls","page":"API","title":"MCMRSimulator.Geometries.User.Obstructions.Walls","text":"MCMRSimulator.Geometries.User.Obstructions.ObstructionGroups.ObstructionGroup{:Walls})(; fields...)\n\nCreates a set of Wall objects. Fields can be set using keyword arguments. The following fields are available:\n\nrotation: Rotation applied to all obstructions in group. Can be set to a matrix or one of :x, :y, or, :z (see get_rotation). Field is required. Expected type: StaticArraysCore.SMatrix{3, 1, Float64, 3}.  default value: [1.0; 0.0; 0.0;;]\nR1: Additional longitudinal relaxation rate (kHz). Surface property. Field is required. Expected type: Float64.  default value: 0.0\nR2: Additional transverse relaxation rate (kHz). Surface property. Field is required. Expected type: Float64.  default value: 0.0\noff_resonance: Additional off-resonance field offset (kHz). Surface property. Field is required. Expected type: Float64.  default value: 0.0\nposition: Spatial offset of obstruction from origin. Field is required. Expected type: Float64.  default value: 0.0\nrepeats: Length scale on which the obstructions are repeated (um). Field can be null. Expected type: StaticArraysCore.MVector{1, Float64}.\nuse_boundingbox: Use bounding boxes for an initial filtering of possible intersections. Field can be null. Expected type: Bool.  default value: true\ngrid_resolution: Resolution of the grid that the volume is split up into (um). Defaults to roughly one grid element per obstruction. Field can be null. Expected type: Float64.\ndwell_time: Average time a particle stays stuck to the surface (ms). Surface property. Field can be null. Expected type: Float64.\ndensity: Surface density of stuck particles relative to the volume density (um). Surface property. Field can be null. Expected type: Float64.\npermeability: Probability of particle passing through the obstruction. Surface property. Field can be null. Expected type: Float64.\nrelaxivity: Fraction of transverse spin lost each time it hits the obstruction. Surface property. Field can be null. Expected type: Float64.\nsize_scale: Size of the smallest obstructions. If not set explicitly, this will be determined by the minimum radius or distance between objects (see size_scale). Field can be null. Expected type: Float64.\n\n\n\n\n\n","category":"type"},{"location":"api/#MCMRSimulator.Geometries.User.Obstructions.Fields.Field","page":"API","title":"MCMRSimulator.Geometries.User.Obstructions.Fields.Field","text":"Field{T}(name::Symbol[, description::String[, default_value::T]]; per_surface=false, per_volume=false, only_group=false, required=false)\n\nRepresents a property of an obstruction with:\n\nType: type of the property value (can also be Nothing unless required is true).\nname: name of the property.\ndescription: describes the property to the user.\ndefault_value: what the value is set to if not provided by the user.\nper_surface: can have a different value for each surface in the obstruction.\nper_volume: can have a different value within each enclosed volume of the obstruction.\nrequired: if true, the user has to provide a value, which cannot be nothing.\n\n\n\n\n\n","category":"type"},{"location":"api/#MCMRSimulator.Geometries.User.Obstructions.Fields.FieldValue","page":"API","title":"MCMRSimulator.Geometries.User.Obstructions.Fields.FieldValue","text":"FieldValue(field::Field{T}, n_obstructions, [, category::Symbol][, value])\n\nRepresents the value for a specific field across a vector of obstructions. For fields with multiple values (one per volume or surface), category is required to set this. The current value is given by value. This has to be type T or a vector of type T. For a non-required field, it can also be nothing (or a vector containing nothings).\n\n\n\n\n\n","category":"type"},{"location":"api/#MCMRSimulator.Geometries.User.Obstructions.Fields.convert_value-Union{Tuple{T}, Tuple{Type{T}, Any}} where T","page":"API","title":"MCMRSimulator.Geometries.User.Obstructions.Fields.convert_value","text":"convert_value(T, value, required::Bool)\n\nConvert value into type T or a vector of T. If required is false value can also be nothing or a vector containing T and nothing.\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.Geometries.User.Obstructions.ObstructionTypes","page":"API","title":"MCMRSimulator.Geometries.User.Obstructions.ObstructionTypes","text":"Types:\n\nObstructionType\n\nMethods:\n\nfields\nkey_value_pairs\n\n\n\n\n\n","category":"module"},{"location":"api/#MCMRSimulator.Geometries.User.Obstructions.ObstructionTypes.ObstructionType","page":"API","title":"MCMRSimulator.Geometries.User.Obstructions.ObstructionTypes.ObstructionType","text":"Defines individual obstruction types\n\n\n\n\n\n","category":"type"},{"location":"api/#MCMRSimulator.Geometries.User.Obstructions.ObstructionTypes.key_value_pairs","page":"API","title":"MCMRSimulator.Geometries.User.Obstructions.ObstructionTypes.key_value_pairs","text":"key_value_pairs(obstruction_type, n_obstructions)\n\nDefines a mapping from symbols to FieldValue objects.\n\nReturns a type with:\n\na sub-set of symbols that are enough to set all unique field values.\na mapping from symbols to field values.\n\n\n\n\n\n","category":"function"},{"location":"api/#MCMRSimulator.Geometries.User.Obstructions.ObstructionGroups.nvolumes-Tuple{MCMRSimulator.Geometries.User.Obstructions.ObstructionGroups.ObstructionGroup}","page":"API","title":"MCMRSimulator.Geometries.User.Obstructions.ObstructionGroups.nvolumes","text":"nvolumes(group)\n\nFor any ObstructionType with group_volumes, this computes the number of distinct volumes.\n\nThis is mainly used to compute the number of distinct components in a mesh.\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.Geometries.User.Fix.apply_properties-Tuple{MCMRSimulator.Geometries.User.Obstructions.ObstructionGroups.ObstructionGroup, Vector{<:MCMRSimulator.Geometries.Internal.Obstructions.FixedObstructions.FixedObstruction}, Int64, Int64}","page":"API","title":"MCMRSimulator.Geometries.User.Fix.apply_properties","text":"apply_properties(user_obstructions, internal_obstructions, index; surface, volume)\n\nApply the generic obstruction properties defined in user_obstruction to internal_obstructions. This function applies (if appropriate):\n\npositional shifts\nvolumetic and surface-bound MRI properties\ncollision properties\nrotation\nrepeats\nmesh vertices\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.Geometries.User.Fix.fix-Tuple{AbstractVector}","page":"API","title":"MCMRSimulator.Geometries.User.Fix.fix","text":"fix(user_geometry; permeability=0., density=0., dwell_time=0., relaxivity=0.)\n\nCreates a fixed version of the user-created geometry that will be used internally by the simulator.\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.Geometries.User.Fix.fix_type","page":"API","title":"MCMRSimulator.Geometries.User.Fix.fix_type","text":"fix_type(group::ObstructionGroup, index)\n\nReplace user ObstructionGroup objects with a FixedGeometry.\n\nThis needs to be defined for each sub-type of ObstructionGroup,     e.g. Spheres, Annuli, Mesh.\n\nShifts, collision properties, and volumetric and surface MRI properties can be added using apply_properties.\n\n\n\n\n\n","category":"function"},{"location":"api/#MCMRSimulator.Geometries.User.FixSusceptibility.fix_susceptibility-Tuple{AbstractVector}","page":"API","title":"MCMRSimulator.Geometries.User.FixSusceptibility.fix_susceptibility","text":"fix_susceptibility(geometry)\n\nCreate a new FixedSusceptibility based on the user-defined geometry settings.\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.Geometries.User.LoadMesh.load_mesh-Tuple{IO}","page":"API","title":"MCMRSimulator.Geometries.User.LoadMesh.load_mesh","text":"load_mesh(file)\n\nLoads a Mesh from a file.\n\nCurrently only PLY files are supported (see ply_from_mesh)\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.Geometries.User.LoadMesh.ply_from_mesh-Tuple{Any}","page":"API","title":"MCMRSimulator.Geometries.User.LoadMesh.ply_from_mesh","text":"ply_from_mesh(file)\n\nLoads a Mesh from a PLY file. PLY stands for Polygon File Format (http://paulbourke.net/dataformats/ply/). PLY IO is handled by PlyIO.jl (https://github.com/JuliaGeometry/PlyIO.jl).\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.Geometries.User.RandomDistribution.random_positions_radii-Tuple{Any, Real, Int64}","page":"API","title":"MCMRSimulator.Geometries.User.RandomDistribution.random_positions_radii","text":"random_positions_radii(box_size, target_density, n_dimensions; distribution=Gamma, mean=1., variance=1., max_iter=1000, min_radius=0.1, max_radius=Inf)\n\nRandomly distributes circles or spheres in space.\n\nArguments:\n\nbox_size: Size of the infinitely repeating box of random positions\ntarget_density: Final density of the circles/spheres. This density will only be approximately reached\nn_dimensions: dimensionality of the space (2 for cicles; 3 for spheres)\ndistribution: distribution from which the radii are drawn (from Distributions.jl)\nmean: mean of the gamma distribution (ignored if distribution explicitly set)\nvariance: variance of the gamma distribution (ignored if distribution explicitly set)\nmax_iter: maximum number of iterations to try to prevent the circles/spheres from overlapping. An error is raised if they still overlap after this number of iterations.\nrepulsion_strength: strength of the repulsion in each step (defaults to 0.001).\nmax_iter_repulse: maximum number of iterations that circles/spheres will be repulsed from each other\nmin_radius: samples from the distribution below this radius will be rejected (in um).\nmax_radius: samples from the distribution above this radius will be rejected (in um).\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.Geometries.User.SplitMesh","page":"API","title":"MCMRSimulator.Geometries.User.SplitMesh","text":"Mesh-specific operations to normalise and split a mesh.\n\nsplit_mesh: applies all the normalisations and splitting\n\n\n\n\n\n","category":"module"},{"location":"api/#MCMRSimulator.Geometries.User.SplitMesh.components-Tuple{MCMRSimulator.Geometries.User.Obstructions.ObstructionGroups.ObstructionGroup{:Mesh}}","page":"API","title":"MCMRSimulator.Geometries.User.SplitMesh.components","text":"components(mesh)\n\nReturns which component each element in the mesh belongs to.\n\nIf not set explicitly (using mesh.components=[...]), it will be computed once based on the connectivity structure.\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.Geometries.User.SplitMesh.connected_indices-Tuple{AbstractVector}","page":"API","title":"MCMRSimulator.Geometries.User.SplitMesh.connected_indices","text":"connected_indices(connectivity_matrix)\nconnected_indices(triangles)\n\nReturns a vector of indices, where each connected component has been given a unique index (starting with 1).\n\nFor the triangles, each vertex will be given an index (not each triangle).\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.Geometries.User.SplitMesh.connectivity_matrix-Tuple{Any}","page":"API","title":"MCMRSimulator.Geometries.User.SplitMesh.connectivity_matrix","text":"connectivity_matrix(triangles, nvertices)\n\nCreate a nverticesxnvertices sparse boolean matrix, which is true for any connected vertices.\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.Geometries.User.SplitMesh.fix_mesh-Tuple{MCMRSimulator.Geometries.User.Obstructions.ObstructionGroups.ObstructionGroup{:Mesh}}","page":"API","title":"MCMRSimulator.Geometries.User.SplitMesh.fix_mesh","text":"fix_mesh(mesh)\n\nReturns a fixed mesh, where all normals point outwards.\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.Geometries.User.SplitMesh.make_normals_consistent!-Tuple{AbstractVector}","page":"API","title":"MCMRSimulator.Geometries.User.SplitMesh.make_normals_consistent!","text":"make_normals_consistent!(triangles)\n\nAdjust the triangles to all point outwards or all point inwards. Assumes that all the triangles are connected (can be enforced using connected_components).\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.Geometries.User.JSON","page":"API","title":"MCMRSimulator.Geometries.User.JSON","text":"Supports I/O to and from json\n\nFunctions:\n\nwrite_geometry\nread_geometry\n\n\n\n\n\n","category":"module"},{"location":"api/#MCMRSimulator.Geometries.User.JSON.read_geometry-Tuple{IO}","page":"API","title":"MCMRSimulator.Geometries.User.JSON.read_geometry","text":"read_geometry(filename/io)\n\nRead geometry from a JSON file.\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.Geometries.User.JSON.write_geometry-Tuple{Any}","page":"API","title":"MCMRSimulator.Geometries.User.JSON.write_geometry","text":"write_geometry([io, ]geometry)\n\nWrites the user-defined geometry as a JSON file. If no IO is provided, the geometry is written to stdout.\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.Geometries.User.ToMesh","page":"API","title":"MCMRSimulator.Geometries.User.ToMesh","text":"Methods that extend the Mesh constructor to convert different types into meshes.\n\n\n\n\n\n","category":"module"},{"location":"api/#MCMRSimulator.Geometries.User.Obstructions.BendyCylinder-Tuple{MCMRSimulator.Geometries.User.Obstructions.ObstructionGroups.IndexedObstruction{:Cylinders}}","page":"API","title":"MCMRSimulator.Geometries.User.Obstructions.BendyCylinder","text":"BendyCylinder(cylinder(s), nsamples=100, height=nothing)\n\nApproximates a cylinder by a BendyCylinder with nsamples along the circumference. The height of the resulting mesh triangles is by default set to the circumference divided by nsamples.\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.Geometries.User.Obstructions.Mesh-Tuple{MCMRSimulator.Geometries.User.Obstructions.ObstructionGroups.ObstructionGroup{:BendyCylinder}}","page":"API","title":"MCMRSimulator.Geometries.User.Obstructions.Mesh","text":"Mesh(other_obstruction; kwargs...)\n\nApproximates any other obstruction type by a mesh. Sometimes a sequence of Mesh objects will be returned instead (e.g., one mesh for each sphere/cylinder in Spheres/Cylinders objects).\n\nKeyword arguments\n\nFor Cylinders:\n\nnsamples: number of mesh vertices along the circumference (default: 100).\nheight: height of mesh triangles in um along the long axis (default: average cylinder circumference divided by nsamples).\n\nFor Walls:\n\nheight: heigh of mesh triangle in um\n\nFor Spheres:\n\nnasamples: resulting mesh will contain at least this many triangles (default: 180).\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.Geometries.User.ToMesh.icosahedron-Tuple{}","page":"API","title":"MCMRSimulator.Geometries.User.ToMesh.icosahedron","text":"icosahedron(subdivision)\n\nCreate an icosahedron. Based on algorithm from https://danielsieger.com/blog/2021/01/03/generating-platonic-solids.html\n\nEach of the 20 original triangles is sub-divided into subdivision^2 triangles\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.Geometries.User.SizeScales.size_scale-Tuple{MCMRSimulator.Geometries.User.Obstructions.ObstructionGroups.ObstructionGroup}","page":"API","title":"MCMRSimulator.Geometries.User.SizeScales.size_scale","text":"size_scale(obstruction; ignore_user_value=false)\n\nDetermines the size scale of the given obstruction.\n\nThe user can set the size scale using obstruction.size_scale=<value>. If set, this value will be returned (unless ignore_user_value is set to true).\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.Geometries.Internal","page":"API","title":"MCMRSimulator.Geometries.Internal","text":"Internal representation of the tissue geometry.\n\nAll objects are immutable and optimised for both memory usage and computational speed.\n\n\n\n\n\n","category":"module"},{"location":"api/#MCMRSimulator.Geometries.Internal.RayGridIntersection","page":"API","title":"MCMRSimulator.Geometries.Internal.RayGridIntersection","text":"Methods:\n\nray_grid_intersections\n\n\n\n\n\n","category":"module"},{"location":"api/#MCMRSimulator.Geometries.Internal.RayGridIntersection.ray_grid_intersections-Union{Tuple{N}, Tuple{StaticArraysCore.SVector{N, Float64}, StaticArraysCore.SVector{N, Float64}}} where N","page":"API","title":"MCMRSimulator.Geometries.Internal.RayGridIntersection.ray_grid_intersections","text":"ray_grid_intersections(origin, destination)\n\nComputes all voxels crossed by a ray between origin and destination with an inifinitely extending 1x1x1 grid. Both origin and destination are length-3 vectors. The returned object is an iterator returning a tuple with:\n\nN-length vector with the voxel that we are crossing through\nFloat with the time the ray entered voxel (0=origin, 1=destination)\nN-length vector with position within voxel that the ray entered (i.e., numbers between 0 and 1)\nFloat with the time the ray left the voxel (0=origin, 1=destination)\nN-length vector with position within voxel that the ray left (i.e., numbers between 0 and 1)\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.Geometries.Internal.BoundingBoxes","page":"API","title":"MCMRSimulator.Geometries.Internal.BoundingBoxes","text":"Types:\n\nBoundingBox: N-dimensional box fully containing an obstruction.\n\nMethods:\n\nisinside: returns whether point/spin is inside of bounding box\ncould_intersect: returns whether spin trajectory could intersect with obstruction in bounding box\n\n\n\n\n\n","category":"module"},{"location":"api/#MCMRSimulator.Geometries.Internal.BoundingBoxes.BoundingBox","page":"API","title":"MCMRSimulator.Geometries.Internal.BoundingBoxes.BoundingBox","text":"BoundingBox(lower::Vector, upper::Vector)\nBoundingBox([center::Vector, ]radius::Number)\n\nRepresents a box in N-dimensional space.\n\nCheck whether particles are inside using isinside.\n\nThe main usage in the simulator is using could_intersect,  which checks whether a spin trajectory could intersect with the obstruction in the bounding box.\n\n\n\n\n\n","category":"type"},{"location":"api/#MCMRSimulator.Geometries.Internal.BoundingBoxes.could_intersect-Tuple{BoundingBox{1}, AbstractVector, AbstractVector}","page":"API","title":"MCMRSimulator.Geometries.Internal.BoundingBoxes.could_intersect","text":"could_intersect(bounding_box, start, dest)\n\nReturns true if a line connecting start to dest could intersect with an obstruction in bounding_box. This function only does some very fast, high-level checks. Just because it returns true does not mean that there is an interesection of the obstruction (or even the bounding box) with the line. However, if it returns false, there is guaranteed to be no intersection.\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.Geometries.Internal.Obstructions","page":"API","title":"MCMRSimulator.Geometries.Internal.Obstructions","text":"Defines all the base obstructions supported by MCMRSimulator.\n\nThey are all sub-types of FixedObstruction.\n\n\n\n\n\n","category":"module"},{"location":"api/#MCMRSimulator.Geometries.Internal.Obstructions.ObstructionIntersections","page":"API","title":"MCMRSimulator.Geometries.Internal.Obstructions.ObstructionIntersections","text":"Types:\n\nObstructionIntersection\n\nAttributes:\n\nempty_obstruction_intersections\n\nMethods:\n\nhas_intersection\n\n\n\n\n\n","category":"module"},{"location":"api/#MCMRSimulator.Geometries.Internal.Obstructions.ObstructionIntersections.empty_obstruction_intersections","page":"API","title":"MCMRSimulator.Geometries.Internal.Obstructions.ObstructionIntersections.empty_obstruction_intersections","text":"ObstructionIntersection objects that indicate that no intersection was found.\n\nThis is a tuple with the ObstructionIntersection for 1, 2, or 3 dimensions.\n\n\n\n\n\n","category":"constant"},{"location":"api/#MCMRSimulator.Geometries.Internal.Obstructions.ObstructionIntersections.ObstructionIntersection","page":"API","title":"MCMRSimulator.Geometries.Internal.Obstructions.ObstructionIntersections.ObstructionIntersection","text":"ObstructionIntersection{N}(distance, normal)\n\nRepresents an intersection with a [FixedObstruction]{N}. Distance should be between 0 and 1 indicating where the obstruction intersects.\n\n\n\n\n\n","category":"type"},{"location":"api/#MCMRSimulator.Geometries.Internal.Obstructions.ObstructionIntersections.has_intersection-Tuple{MCMRSimulator.Geometries.Internal.Obstructions.ObstructionIntersections.ObstructionIntersection}","page":"API","title":"MCMRSimulator.Geometries.Internal.Obstructions.ObstructionIntersections.has_intersection","text":"has_intersection(intersection)\n\nReturn true if the intersection object represents a true intersection.\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.Geometries.Internal.Obstructions.FixedObstructions","page":"API","title":"MCMRSimulator.Geometries.Internal.Obstructions.FixedObstructions","text":"Types:\n\nFixedObstruction\n\nMethods:\n\ndetect_intersection\nhas_inside\nisinside\nradius\nBoundingBox\nobstruction_type\nrandom_surface_positions\n\n\n\n\n\n","category":"module"},{"location":"api/#MCMRSimulator.Geometries.Internal.BoundingBoxes.BoundingBox-Union{Tuple{MCMRSimulator.Geometries.Internal.Obstructions.FixedObstructions.FixedObstruction{N}}, Tuple{N}} where N","page":"API","title":"MCMRSimulator.Geometries.Internal.BoundingBoxes.BoundingBox","text":"BoundingBox(obstruction[, vertices])\n\nReturns the smallest bounding box that fully encloses the FixedObstruction.\n\nvertices will only be provided for the [IndexTriangle] type.\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.Geometries.Internal.Obstructions.FixedObstructions.FixedObstruction","page":"API","title":"MCMRSimulator.Geometries.Internal.Obstructions.FixedObstructions.FixedObstruction","text":"Parent type of all individual obstructions.\n\nN represents the intrinsic dimensionality of the obstruction (e.g., 1 for walls, 2 for cylinders, 3 for spheres/meshes)\n\nRequired interface for each obstruction:\n\ndetect_intersection(obstruction, start, dest) -> ObstructionIntersection\nhas_inside(obstruction_type) -> Boolean\nisinside(obstruction, position) -> Boolean\nAt least one of these two:\nradius(obstruction): returns the radius of the obstruc\nBoundingBox(obstruction): returns a Bounding box surrounding the obstruction\n\n\n\n\n\n","category":"type"},{"location":"api/#MCMRSimulator.Geometries.Internal.BoundingBoxes.isinside-Union{Tuple{N}, Tuple{MCMRSimulator.Geometries.Internal.Obstructions.FixedObstructions.FixedObstruction{N}, AbstractVector, Vararg{Any}}} where N","page":"API","title":"MCMRSimulator.Geometries.Internal.BoundingBoxes.isinside","text":"isinside(obstruction, position)\n\nReturns true if the position is inside the obstruction. This will be inaccurate if the particle with that position is stuck on the surface of the obstruction.\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.Geometries.Internal.Obstructions.FixedObstructions.detect_intersection-Union{Tuple{N}, Tuple{MCMRSimulator.Geometries.Internal.Obstructions.FixedObstructions.FixedObstruction{N}, StaticArraysCore.SVector{N}, StaticArraysCore.SVector{N}, NamedTuple, Union{Nothing, Bool}}} where N","page":"API","title":"MCMRSimulator.Geometries.Internal.Obstructions.FixedObstructions.detect_intersection","text":"detect_intersection(obstruction, start, dest[, inside])\n\nDetermines whether the line from start to dest intersects with obstruction. If no intersection is found, empty_obstruction_intersection is returned. Otherwise a ObstructionIntersection object is returned.\n\nIf inside is set, the last collision in the trajectory was with this obstruction. inside indicates whether this previous collision was with the inside of the obstruction. This is passed on to prevent the particle from colliding with the same obstruction multiple times without any intermediate movement.\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.Geometries.Internal.Obstructions.FixedObstructions.has_inside","page":"API","title":"MCMRSimulator.Geometries.Internal.Obstructions.FixedObstructions.has_inside","text":"has_inside(obstruction_type)\n\nReturns true if a particular sub-type of FixedObstruction has an inside.\n\n\n\n\n\n","category":"function"},{"location":"api/#MCMRSimulator.Geometries.Internal.Obstructions.FixedObstructions.obstruction_type-Union{Tuple{Type{O}}, Tuple{O}} where O<:MCMRSimulator.Geometries.Internal.Obstructions.FixedObstructions.FixedObstruction","page":"API","title":"MCMRSimulator.Geometries.Internal.Obstructions.FixedObstructions.obstruction_type","text":"obstruction_type(obstruction/geometry)\n\nReturns the type of the obstruction that this geometry is built up out of\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.Geometries.Internal.Obstructions.FixedObstructions.radius","page":"API","title":"MCMRSimulator.Geometries.Internal.Obstructions.FixedObstructions.radius","text":"radius(cylinder/sphere...)\n\nReturns the radius of an obstruction.\n\n\n\n\n\n","category":"function"},{"location":"api/#MCMRSimulator.Geometries.Internal.Obstructions.FixedObstructions.random_surface_positions-Tuple{MCMRSimulator.Geometries.Internal.Obstructions.FixedObstructions.FixedObstruction, NamedTuple, Number}","page":"API","title":"MCMRSimulator.Geometries.Internal.Obstructions.FixedObstructions.random_surface_positions","text":"random_surface_positions(obstruction[, args], surface_density)\n\nReturns a vector of positions and normals on the normals of a specific obstruction. Normals should always assume that the particle is on the inside.\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.Geometries.Internal.Obstructions.FixedObstructions.size_scale-Tuple{MCMRSimulator.Geometries.Internal.Obstructions.FixedObstructions.FixedObstruction}","page":"API","title":"MCMRSimulator.Geometries.Internal.Obstructions.FixedObstructions.size_scale","text":"size_scale(obstruction/geometry)\n\nReturns the size scale of the smallest object within the geometry (typically the radius or the repeating length scale).\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.Geometries.Internal.Obstructions.Triangles.curvature-NTuple{4, Any}","page":"API","title":"MCMRSimulator.Geometries.Internal.Obstructions.Triangles.curvature","text":"curvature(triangles, vertices[index1, index2])\n\nComputes the curvature between two neighbouring triangles (index1 and index2). If no indices are provided computes the mean curvature over the whole surface.\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.Geometries.Internal.Obstructions.Triangles.detect_intersection_partial-Union{Tuple{N}, Tuple{MCMRSimulator.Geometries.Internal.Obstructions.Triangles.FullTriangle, StaticArraysCore.SVector{N}, StaticArraysCore.SVector{N}}, Tuple{MCMRSimulator.Geometries.Internal.Obstructions.Triangles.FullTriangle, StaticArraysCore.SVector{N}, StaticArraysCore.SVector{N}, Any}} where N","page":"API","title":"MCMRSimulator.Geometries.Internal.Obstructions.Triangles.detect_intersection_partial","text":"Computes the intersection for a triangle in a mesh (returned by detect_intersection). This function also returns an additional bool. This bool will be true if the intersection is exactly at the edge of the triangle.\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.Geometries.Internal.Obstructions.Triangles.neighbours-Tuple{AbstractVector}","page":"API","title":"MCMRSimulator.Geometries.Internal.Obstructions.Triangles.neighbours","text":"neighbours(triangles)\n\nReturn pairs of indices of triangles that share an edge.\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.Geometries.Internal.Obstructions.Triangles.normal-Tuple{AbstractVector, AbstractVector, AbstractVector}","page":"API","title":"MCMRSimulator.Geometries.Internal.Obstructions.Triangles.normal","text":"normal(p1, p2, p3)\n\nComputes the normal of a triangle formed by the three points\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.Geometries.Internal.Obstructions.Triangles.triangle_size-Tuple{MCMRSimulator.Geometries.Internal.Obstructions.Triangles.FullTriangle}","page":"API","title":"MCMRSimulator.Geometries.Internal.Obstructions.Triangles.triangle_size","text":"triangle_size(full_triangle)\ntriangle_size(p1, p2, p3)\n\nComputes the size of a FullTriangle formed by three points\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.Geometries.Internal.Obstructions.Shifts.Shift","page":"API","title":"MCMRSimulator.Geometries.Internal.Obstructions.Shifts.Shift","text":"Shifts the obstruction base from the origin to shift.\n\nThe resulting object itself behaves like the base obstruction.\n\n\n\n\n\n","category":"type"},{"location":"api/#MCMRSimulator.Geometries.Internal.Reflections","page":"API","title":"MCMRSimulator.Geometries.Internal.Reflections","text":"Types:\n\nReflection\n\nMethods:\n\ndirection\nhas_hit\nprevious_hit\n\n\n\n\n\n","category":"module"},{"location":"api/#MCMRSimulator.Geometries.Internal.Reflections.Reflection","page":"API","title":"MCMRSimulator.Geometries.Internal.Reflections.Reflection","text":"Reflection(intersection, direction, timestep, ratio_displaced, time_moved, distance_moved, permeable=false)\n\nRepresents a reflection of a particle after colliding.\n\nParameters:\n\nintersection: Intersection represents the intersection of the trajectory with an obstruction. This will supply:\ngeometry_index: index of the geometry that got hit.\nobstruction_index: index of the obstruction that got hit within the geometry.\ninside: whether the inside of the obstruction was hit.\ndirection: this is stored in an updated form if the obstruction is not permeable (i.e., we have an actual reflection) as indicated by the permeable parameter.\nratio_displaced: how large the displacement drawn from the Gaussian distribution was relative to that expected for the timestep.   This is calculated as \"step_size / sqrt(timestep)\".\ntime_moved: how long the particle has already been moving since the last time it was free at the start of a timestep (in ms).\ndistance_moved: how far the particle has already moved (in um).\n\n\n\n\n\n","category":"type"},{"location":"api/#MCMRSimulator.Geometries.Internal.Reflections.Reflection-Tuple{Any}","page":"API","title":"MCMRSimulator.Geometries.Internal.Reflections.Reflection","text":"Reflection(ratio_displaced)\n\nCreates a \"virtual\" Reflection that represents the movement of a free particle as drawn at the start of a timestep.\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.Geometries.Internal.Obstructions.ObstructionIntersections.has_intersection-Tuple{MCMRSimulator.Geometries.Internal.Reflections.Reflection}","page":"API","title":"MCMRSimulator.Geometries.Internal.Obstructions.ObstructionIntersections.has_intersection","text":"has_intersection(reflection)\n\nReturns true if this reflection is not empty, i.e., it represents a real collision with an obstruction.\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.Geometries.Internal.Reflections.direction-Tuple{MCMRSimulator.Geometries.Internal.Reflections.Reflection, Any, Any}","page":"API","title":"MCMRSimulator.Geometries.Internal.Reflections.direction","text":"direction(reflection, remaining_time)\n\nReturns the displacement that the spin should end up if it has remaining_time ms left in this timestep.\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.Geometries.Internal.Reflections.has_hit-Tuple{MCMRSimulator.Geometries.Internal.Reflections.Reflection}","page":"API","title":"MCMRSimulator.Geometries.Internal.Reflections.has_hit","text":"has_hit(reflection)\n\nReturns a tuple with the indices of the obstruction that the particle is reflecting off.\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.Geometries.Internal.Reflections.previous_hit-Tuple{MCMRSimulator.Geometries.Internal.Reflections.Reflection}","page":"API","title":"MCMRSimulator.Geometries.Internal.Reflections.previous_hit","text":"previous_hit(reflection)\n\nReturns a tuple with the details of the previous reflection relevant for detect_intersection.\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.Geometries.Internal.FixedObstructionGroups","page":"API","title":"MCMRSimulator.Geometries.Internal.FixedObstructionGroups","text":"Types:\n\nFixedGeometry\nFixedObstructionGroup\n\nMethods:\n\nhas_inside\nisinside\ndetect_intersection\nsize_scale\n\n\n\n\n\n","category":"module"},{"location":"api/#MCMRSimulator.Geometries.Internal.FixedObstructionGroups.FixedGeometry","page":"API","title":"MCMRSimulator.Geometries.Internal.FixedObstructionGroups.FixedGeometry","text":"FixedGeometry([obstruction_groups...])\n\nA collection of FixedObstructionGroup objects each reperesenting part of the geometry.\n\n\n\n\n\n","category":"type"},{"location":"api/#MCMRSimulator.Geometries.Internal.FixedObstructionGroups.FixedObstructionGroup","page":"API","title":"MCMRSimulator.Geometries.Internal.FixedObstructionGroups.FixedObstructionGroup","text":"Collection of multiple base FixedObstruction objects.\n\nThis is the main internal representation of a group of identical FixedObstruction objects.\n\nProperties:\n\nobstructions: vector of the actual FixedObstruction objects.\nparent_index: Index of this group within the larger FixedGeometry.\noriginal_index: Index of this group within the original user-provided geometry.\nrotation: rotation from global 3-dimensional space to the 1, 2, or 3-dimensional space of the obstructions.\ninv_rotation: inverse of the rotation above\ngrid: Grid object on which the obstruction intersections have been precomputed. This speeds up the detection of intersections.\nbounding_boxes: vector of BoundingBox objects for each obstruction. These are used to predect whether a spin could intersect with the obstruction.\nvolume: R1, R2, and off-resonance properties of the spins inside the obstructions.\nsurface: R1, R2, off-resonance, surfacedensity and dwelltime properties of particles stuck to the surface. Also, contains the permeability and surface relaxivity to process collsions.\nvertices: vector of vertices (only used for a mesh).\n\n\n\n\n\n","category":"type"},{"location":"api/#MCMRSimulator.Geometries.Internal.BoundingBoxes.isinside","page":"API","title":"MCMRSimulator.Geometries.Internal.BoundingBoxes.isinside","text":"isinside(geometry, position[, stuck_reflection])\n\nReturns a vector of pairs of indices with all the obstructions in FixedGeometry containing the position (in order). The first index indicates the index of the FixedObstructionGroup within the geometry. The second index is the index of the specific FixedObstruction within the obstruction group.\n\n\n\n\n\n","category":"function"},{"location":"api/#MCMRSimulator.Geometries.Internal.BoundingBoxes.isinside-2","page":"API","title":"MCMRSimulator.Geometries.Internal.BoundingBoxes.isinside","text":"isinside(obstruction_group, position[, stuck_to])\n\nReturns a vector of indices with all the obstructions in FixedObstructionGroup containing the position (in order). For obstructions with only a single inside, will return an empty vector (\"[]\") if the particle is outside and a \"[0]\" if inside.\n\n\n\n\n\n","category":"function"},{"location":"api/#MCMRSimulator.Geometries.Internal.FixedObstructionGroups.detect_intersection-Union{Tuple{N}, Tuple{MCMRSimulator.Geometries.Internal.FixedObstructionGroups.FixedObstructionGroup{N, R, O, G} where {R<:Union{Nothing, StaticArraysCore.SVector{N, Float64}}, O<:MCMRSimulator.Geometries.Internal.Obstructions.FixedObstructions.FixedObstruction{N}, G<:MCMRSimulator.Geometries.Internal.HitGrids.HitGrid{N, O}}, StaticArraysCore.SVector{3}, StaticArraysCore.SVector{3}}, Tuple{MCMRSimulator.Geometries.Internal.FixedObstructionGroups.FixedObstructionGroup{N, R, O, G} where {R<:Union{Nothing, StaticArraysCore.SVector{N, Float64}}, O<:MCMRSimulator.Geometries.Internal.Obstructions.FixedObstructions.FixedObstruction{N}, G<:MCMRSimulator.Geometries.Internal.HitGrids.HitGrid{N, O}}, StaticArraysCore.SVector{3}, StaticArraysCore.SVector{3}, Tuple{Int64, Int64, Bool}}} where N","page":"API","title":"MCMRSimulator.Geometries.Internal.FixedObstructionGroups.detect_intersection","text":"detect_intersection(obstruction_group/geometry, start, dest[, previous_intersection])\n\nFind the closest intersection between the line from start to dest and an obstruction in the geometry(ies).\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.Geometries.Internal.FixedObstructionGroups.prepare_isinside!-Tuple{MCMRSimulator.Geometries.Internal.FixedObstructionGroups.FixedObstructionGroup}","page":"API","title":"MCMRSimulator.Geometries.Internal.FixedObstructionGroups.prepare_isinside!","text":"prepare_isinside!(fg::FixedObstructionGroup, )\n\nPrepare the FixedObstructionGroup for calls of isinside.\n\nThis function is not thread-safe, so it should be called before multi-threading in evolve. If called multiple times, it will only do the required work the first time.\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.Geometries.Internal.Obstructions.FixedObstructions.random_surface_positions-Union{Tuple{N}, Tuple{MCMRSimulator.Geometries.Internal.FixedObstructionGroups.FixedObstructionGroup{N, R, O, G} where {R<:Union{Nothing, StaticArraysCore.SVector{N, Float64}}, O<:MCMRSimulator.Geometries.Internal.Obstructions.FixedObstructions.FixedObstruction{N}, G<:MCMRSimulator.Geometries.Internal.HitGrids.HitGrid{N, O}}, BoundingBox{3}, Number}} where N","page":"API","title":"MCMRSimulator.Geometries.Internal.Obstructions.FixedObstructions.random_surface_positions","text":"random_surface_positions(group/geometry, bounding_box, volume_density)\n\nRandomly draws positions on the surface within the BoundingBox. The density of points will be equal to surface_density * volume_density, where surface_density is either set by the group itself or by default_surface_density (which should come from GlobalProperties).\n\nFor each drawn position will return a tuple with:\n\nposition: 3D in um\nsurface normal: 3D, normalised (always pointing inwards)\ngeometry_index: index of the group\nobstruction_index: index of the obstruction within the group that the position is on the surface of\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.Geometries.Internal.HitGrids.HitGrid","page":"API","title":"MCMRSimulator.Geometries.Internal.HitGrids.HitGrid","text":"HitGrid(obstructions, vertices, grid_resolution[, repeats])\n\nA precomputed grid that makes it easier to compute the interactions between a trajectory and obstructions.\n\nPredetermines the interactions between the obstructions and the grid. This is determined purely based on the bounding boxes (could be improved by considering the shape of each obstruction).\n\n\n\n\n\n","category":"type"},{"location":"api/#MCMRSimulator.Geometries.Internal.HitGrids.HitGridNoRepeat","page":"API","title":"MCMRSimulator.Geometries.Internal.HitGrids.HitGridNoRepeat","text":"A specific version of HitGrid that is optimised for any non-repeating geometry.\n\n\n\n\n\n","category":"type"},{"location":"api/#MCMRSimulator.Geometries.Internal.HitGrids.HitGridRepeat","page":"API","title":"MCMRSimulator.Geometries.Internal.HitGrids.HitGridRepeat","text":"A specific version of HitGrid that is optimised for any repeating geometry.\n\n\n\n\n\n","category":"type"},{"location":"api/#MCMRSimulator.Geometries.Internal.BoundingBoxes.isinside-Union{Tuple{N}, Tuple{MCMRSimulator.Geometries.Internal.HitGrids.HitGrid{N}, StaticArraysCore.SVector{N, Float64}, Int32, Bool, NamedTuple}} where N","page":"API","title":"MCMRSimulator.Geometries.Internal.BoundingBoxes.isinside","text":"isinside(grid, position)\n\nGet the indices of obstructions that contain the position.\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.Geometries.Internal.HitGrids.detect_intersection_grid-Union{Tuple{N}, Tuple{MCMRSimulator.Geometries.Internal.HitGrids.HitGrid{N}, StaticArraysCore.SVector{N, Float64}, StaticArraysCore.SVector{N, Float64}, Int32, Bool, NamedTuple}} where N","page":"API","title":"MCMRSimulator.Geometries.Internal.HitGrids.detect_intersection_grid","text":"detect_intersection_grid(grid, start, dest, prev_index, prev_inside, args)\n\nComputes the first intersection between the trajectory from start to dest and the obstructions stored in grid.\n\nThis function returns the index of the obstruction the trajectory intersects with and an ObstructionIntersection object describing the intersection in more detail. If prev_index is non-zero, it is assumed that the trajectory starts from hitting the obstruction with that index having hit at prev_inside.\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.Geometries.Internal.HitGrids.find_hits-Union{Tuple{N}, Tuple{BoundingBox{N}, Any, Any, Any}} where N","page":"API","title":"MCMRSimulator.Geometries.Internal.HitGrids.find_hits","text":"find_hits(bb, dims, repeats, bounding_boxes)\n\nFind the intersections between the bounding_boxes and a grid with extent of bounding box bb and size of dims.\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.Geometries.Internal.HitGrids.obstructions-Union{Tuple{MCMRSimulator.Geometries.Internal.HitGrids.HitGrid{N, O}}, Tuple{O}, Tuple{N}} where {N, O}","page":"API","title":"MCMRSimulator.Geometries.Internal.HitGrids.obstructions","text":"obstructions(grid/fixed_obstructions)\n\nReturns a sequence of all the obstructions included in this group.\n\nThis operation is very slow and should be avoided within inner loops.\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.Geometries.Internal.Properties","page":"API","title":"MCMRSimulator.Geometries.Internal.Properties","text":"Methods to extract properties from the FixedGeometry.\n\nMRI properties (using MRIProperties):\n\nR1\nR2\noff_resonance\n\nCollision properties:\n\npermeability\nsurface_relaxivity\nsurface_density\ndwell_time\n\nOthers:\n\nmax_timestep_sticking\n\n\n\n\n\n","category":"module"},{"location":"api/#MCMRSimulator.Geometries.Internal.Properties.MRIProperties","page":"API","title":"MCMRSimulator.Geometries.Internal.Properties.MRIProperties","text":"MRIProperties(R1, R2, off_resonance)\nMRIProperties(full_geometry, inside_geometry, global_properties, position, reflection)\n\nDetermines the R1, R2, and off-resonance of a particle at given position and bound at Reflection.\n\n\n\n\n\n","category":"type"},{"location":"api/#MCMRSimulator.Geometries.Internal.Properties.dwell_time-Tuple{MCMRSimulator.Geometries.Internal.FixedObstructionGroups.FixedObstructionGroup, Int64}","page":"API","title":"MCMRSimulator.Geometries.Internal.Properties.dwell_time","text":"dwell_time(geometry, reflection)\n\nReturns the dwell_time experienced by the spin hitting the surface represented by a Reflection. The geometry has to be a FixedGeometry.\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.Geometries.Internal.Properties.max_timestep_sticking-Tuple{Tuple{Vararg{MCMRSimulator.Geometries.Internal.FixedObstructionGroups.FixedObstructionGroup, N}} where N, Number}","page":"API","title":"MCMRSimulator.Geometries.Internal.Properties.max_timestep_sticking","text":"max_timestep_sticking(geometry, diffusivity)\n\nReturns the maximum timestep that can be used while:\n\nkeeping stick_probability lower than 25%\nand keeping the timestep below the dwell_time\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.Geometries.Internal.Properties.permeability-Tuple{MCMRSimulator.Geometries.Internal.FixedObstructionGroups.FixedObstructionGroup, Int64}","page":"API","title":"MCMRSimulator.Geometries.Internal.Properties.permeability","text":"permeability(geometry, reflection)\n\nReturns the permeability experienced by the spin hitting the surface represented by a Reflection. The geometry has to be a FixedGeometry.\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.Geometries.Internal.Properties.surface_density-Tuple{MCMRSimulator.Geometries.Internal.FixedObstructionGroups.FixedObstructionGroup, Int64}","page":"API","title":"MCMRSimulator.Geometries.Internal.Properties.surface_density","text":"surface_density(geometry, reflection)\n\nReturns the surface_density experienced by the spin hitting the surface represented by a Reflection. The geometry has to be a FixedGeometry.\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.Geometries.Internal.Properties.surface_relaxivity-Tuple{MCMRSimulator.Geometries.Internal.FixedObstructionGroups.FixedObstructionGroup, Int64}","page":"API","title":"MCMRSimulator.Geometries.Internal.Properties.surface_relaxivity","text":"surface_relaxivity(geometry, reflection)\n\nReturns the surface_relaxivity experienced by the spin hitting the surface represented by a Reflection. The geometry has to be a FixedGeometry.\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.Geometries.Internal.Susceptibility.Base","page":"API","title":"MCMRSimulator.Geometries.Internal.Susceptibility.Base","text":"Types:\n\nSusceptibility\n\nMethods:\n\nsingle_susceptibility\n\n\n\n\n\n","category":"module"},{"location":"api/#MCMRSimulator.Geometries.Internal.Susceptibility.Base.BaseSusceptibility","page":"API","title":"MCMRSimulator.Geometries.Internal.Susceptibility.Base.BaseSusceptibility","text":"BaseSusceptibility{N}\n\nParent type of all susceptibility sources. Each BaseSusceptibility object represents a single susceptibility source in N-dimensional space  (e.g., N=2 for CylinderSusceptibility or N=3 for PointSusceptibility).\n\n\n\n\n\n","category":"type"},{"location":"api/#MCMRSimulator.Geometries.Internal.Susceptibility.Base.single_susceptibility","page":"API","title":"MCMRSimulator.Geometries.Internal.Susceptibility.Base.single_susceptibility","text":"single_susceptibility(source::BaseSusceptibility, offset, distance, stuck_to, b0_field)\n\nComputes the off-resonance field contribution from a BaseSusceptibility source given:\n\noffset vector from spin position to the centre of the source\ndistance of the spin from the source (which is the norm of offset)\nstuck_to nothing for free particle. Otherwise, boolean indicating whether the particle is stuck to the inside or outside of the obstructions it is stuck to.\nb0_field N-length vector with the magnetic field within the coordinate system of the susceptibility source\n\n\n\n\n\n","category":"function"},{"location":"api/#MCMRSimulator.Geometries.Internal.Susceptibility.Base.single_susceptibility_gradient","page":"API","title":"MCMRSimulator.Geometries.Internal.Susceptibility.Base.single_susceptibility_gradient","text":"single_susceptibility_gradient(source::BaseSusceptibility)\n\nMaximal off-resonance gradient in ppm/um produced by a single susceptibility source.\n\n\n\n\n\n","category":"function"},{"location":"api/#MCMRSimulator.Geometries.Internal.Susceptibility.Cylinder.CylinderSusceptibility","page":"API","title":"MCMRSimulator.Geometries.Internal.Susceptibility.Cylinder.CylinderSusceptibility","text":"CylinderSusceptibility(radius, g_ratio, chi_I, chi_A, b0_field)\n\nCreates a cylindrical susceptibility source, which produces the intra- and extra-axonal field expected for a myelin sheath. More realistic myelin sheaths with a finite width can be modeled using AnnulusSusceptibility.\n\n\n\n\n\n","category":"type"},{"location":"api/#MCMRSimulator.Geometries.Internal.Susceptibility.Base.single_susceptibility-Tuple{MCMRSimulator.Geometries.Internal.Susceptibility.Cylinder.CylinderSusceptibility, AbstractVector, Number, Union{Nothing, Bool}, StaticArraysCore.SVector{2, Float64}}","page":"API","title":"MCMRSimulator.Geometries.Internal.Susceptibility.Base.single_susceptibility","text":"single_susceptibility(cylinder, position, distance, stuck_to, b0_field)\n\nComputed by the hollow cylinder fiber model from (Wharton and Bowtell, 2012). The myelin sheath is presumed to be an infinitely thin cylinder.\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.Geometries.Internal.Susceptibility.Annulus.AnnulusSusceptibility","page":"API","title":"MCMRSimulator.Geometries.Internal.Susceptibility.Annulus.AnnulusSusceptibility","text":"AnnulusSusceptibility(inner_radius, outer_radius, chi_I, chi_A, b0_field)\n\nCreates an annular susceptibility source, which computes the off-resonance field expected for a myelin sheath.\n\n\n\n\n\n","category":"type"},{"location":"api/#MCMRSimulator.Geometries.Internal.Susceptibility.Base.single_susceptibility-Tuple{MCMRSimulator.Geometries.Internal.Susceptibility.Annulus.AnnulusSusceptibility, AbstractVector, Number, Union{Nothing, Bool}, StaticArraysCore.SVector{2, Float64}}","page":"API","title":"MCMRSimulator.Geometries.Internal.Susceptibility.Base.single_susceptibility","text":"single_susceptibility(annulus, position, distance, stuck_inside, b0_field)\n\nComputed by the hollow cylinder fiber model from (Wharton and Bowtell, 2012).\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.Geometries.Internal.Susceptibility.Triangle","page":"API","title":"MCMRSimulator.Geometries.Internal.Susceptibility.Triangle","text":"Computes the off-resonance field produced by a triangular mesh:\n\n\n\n\n\n","category":"module"},{"location":"api/#MCMRSimulator.Geometries.Internal.Susceptibility.Triangle.AnisotropicTriangleSusceptibility","page":"API","title":"MCMRSimulator.Geometries.Internal.Susceptibility.Triangle.AnisotropicTriangleSusceptibility","text":"AnisotropicTriangleSusceptibility(full_triangle, chi_I, chi_A, b0_field)\n\nRepresents a triangle with anisotropic magnetic susceptibility.\n\nFor more details on the internal representation, see TriangleSusceptibility\n\n\n\n\n\n","category":"type"},{"location":"api/#MCMRSimulator.Geometries.Internal.Susceptibility.Triangle.IsotropicTriangleSusceptibility","page":"API","title":"MCMRSimulator.Geometries.Internal.Susceptibility.Triangle.IsotropicTriangleSusceptibility","text":"IsotropicTriangleSusceptibility(full_triangle, chi_I)\n\nRepresents a triangle with isotropic magnetic susceptibility.\n\nFor more details on the internal representation, see TriangleSusceptibility\n\n\n\n\n\n","category":"type"},{"location":"api/#MCMRSimulator.Geometries.Internal.Susceptibility.Triangle.TriangleSusceptibility","page":"API","title":"MCMRSimulator.Geometries.Internal.Susceptibility.Triangle.TriangleSusceptibility","text":"Parent type for each triangle in a mesh with susceptibility.\n\nComputes the field produced by a triangular susceptibility source One triangle vertex is assumed to be at vertex1. Within the coordinate system defined by rotation the other two points are at:\n\n(0, e2_shift, 0)\n(e3_shift[1], e3_shift[2], 0)\n\nThere are two versions:\n\nIsotropicTriangleSusceptibility\nAnisotropicTriangleSusceptibility\n\n\n\n\n\n","category":"type"},{"location":"api/#MCMRSimulator.Geometries.Internal.Susceptibility.Base.single_susceptibility-Tuple{MCMRSimulator.Geometries.Internal.Susceptibility.Triangle.TriangleSusceptibility, AbstractVector, Number, Union{Nothing, Bool}, StaticArraysCore.SVector{3, Float64}}","page":"API","title":"MCMRSimulator.Geometries.Internal.Susceptibility.Base.single_susceptibility","text":"single_susceptibility(triangle, position, distance[, stuck_inside])\n\nComputed using the algorithm described in (Rubeck et al., 2013).\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.Geometries.Internal.Susceptibility.Triangle.right_angle_triangle_field-Tuple{Number, Number, Number}","page":"API","title":"MCMRSimulator.Geometries.Internal.Susceptibility.Triangle.right_angle_triangle_field","text":"right_angle_triangle_field(a, b, z)\n\nReturns the magnetic field experienced at (0, 0, z) generated by a triangle with edges (0, 0, 0), (a, 0, 0), (a, b, 0). The susceptibility of the triangle is assumed to be sigma_m = 4 pi mu_0.\n\nThis uses equations 8-10 from (Rubeck et al., 2013). Note that these equations assume a and b to be positive.\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.Geometries.Internal.Susceptibility.Grid.AnisotropicSusceptibilityGridElement","page":"API","title":"MCMRSimulator.Geometries.Internal.Susceptibility.Grid.AnisotropicSusceptibilityGridElement","text":"SusceptibilityGridElement with an arbitrarily oriented magnetisation.\n\n\n\n\n\n","category":"type"},{"location":"api/#MCMRSimulator.Geometries.Internal.Susceptibility.Grid.FixedSusceptibility","page":"API","title":"MCMRSimulator.Geometries.Internal.Susceptibility.Grid.FixedSusceptibility","text":"Tuple containing all susceptibility sources\n\n\n\n\n\n","category":"type"},{"location":"api/#MCMRSimulator.Geometries.Internal.Susceptibility.Grid.IsotropicSusceptibilityGridElement","page":"API","title":"MCMRSimulator.Geometries.Internal.Susceptibility.Grid.IsotropicSusceptibilityGridElement","text":"SusceptibilityGridElement with a magnetisation in the direction of the B0 field.\n\n\n\n\n\n","category":"type"},{"location":"api/#MCMRSimulator.Geometries.Internal.Susceptibility.Grid.SusceptibilityGrid","page":"API","title":"MCMRSimulator.Geometries.Internal.Susceptibility.Grid.SusceptibilityGrid","text":"Precomputed off-resonance field from repeating distant sources.\n\nIn each voxel the pre-computed field is stored in off_resonance. The sources for which the field contribution should still be added are stored in indices. These are stored of vectors of SuscetibilityGridElement, where each element contains all the information to compute the dipole field approximation.\n\n\n\n\n\n","category":"type"},{"location":"api/#MCMRSimulator.Geometries.Internal.Susceptibility.Grid.SusceptibilityGridElement","page":"API","title":"MCMRSimulator.Geometries.Internal.Susceptibility.Grid.SusceptibilityGridElement","text":"A simplified representation of a magnetic susceptibility obstruction, which has been simplified as a point source in N-dimensional space.\n\nThere are two versions:\n\nIsotropicSusceptibilityGridElement: for objects with isotropic susceptibilities (and symmetric objects with anisotropic susceptibilities), where the magnetisation is consistently in the direction of the B0 field.\nAnisotropicSusceptibilityGridElement: for objects with anisotropic susceptibilities, where the magnetisation can be in any arbitrary orientation.\n\n\n\n\n\n","category":"type"},{"location":"api/#MCMRSimulator.Geometries.Internal.Susceptibility.Grid.SusceptibilityGridNoRepeat","page":"API","title":"MCMRSimulator.Geometries.Internal.Susceptibility.Grid.SusceptibilityGridNoRepeat","text":"Specialised version of SusceptibilityGrid for non-repeating geometries.\n\n\n\n\n\n","category":"type"},{"location":"api/#MCMRSimulator.Geometries.Internal.Susceptibility.Grid.SusceptibilityGridRepeat","page":"API","title":"MCMRSimulator.Geometries.Internal.Susceptibility.Grid.SusceptibilityGridRepeat","text":"Specialised version of SusceptibilityGrid for repeating geometries.\n\n\n\n\n\n","category":"type"},{"location":"api/#MCMRSimulator.Geometries.Internal.Susceptibility.Grid.dipole_approximation-Tuple{Float64, StaticArraysCore.SVector{3, Float64}, Float64, StaticArraysCore.SVector{3, Float64}}","page":"API","title":"MCMRSimulator.Geometries.Internal.Susceptibility.Grid.dipole_approximation","text":"dipole_approximation(susceptibility, offset, distance, B0_field)\ndipole_approximation(magnetisation, offset, distance, B0_field)\n\nComputes the shift in magnetic field due to a shift of susceptibility which is at the given offset (with given pre-computed distance) along the B0 field.\n\nThe susceptibility is given as a scalar value and is assumed to generate a field in the z-direction. The magnetisation is a vector representing a magnetisation in an arbitrary direction (as required for anisotropic susceptibilities).\n\nEquations from (Schenck, 1996).\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.Geometries.Internal.Susceptibility.Grid.element_susceptibility-Tuple{MCMRSimulator.Geometries.Internal.Susceptibility.Grid.SusceptibilityGridElement, Int32, MCMRSimulator.Geometries.Internal.Susceptibility.Grid.SusceptibilityGrid, AbstractVector, Union{Nothing, Bool}}","page":"API","title":"MCMRSimulator.Geometries.Internal.Susceptibility.Grid.element_susceptibility","text":"element_susceptibility(source::SuscetibilityGridElement, grid::SuscetibilityGrid, position, stuck_to)\n\nComputes the off-resonance field contribution from a SuscetibilityGridElement.\n\nFor a position within twice the source.radius of source.position, this will call dipole_approximation. For any closer position single_susceptibility will be called on the appropriate element in grid.sources.\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.Geometries.Internal.Susceptibility.Grid.off_resonance_gradient-Tuple{MCMRSimulator.Geometries.Internal.Susceptibility.Grid.SusceptibilityGrid, Any}","page":"API","title":"MCMRSimulator.Geometries.Internal.Susceptibility.Grid.off_resonance_gradient","text":"off_resonance_gradient(susceptibility, B0)\n\nMaximum gradient of the off-resonance field in kHz/um due to the simulated susceptibility sources.\n\nInternally, computed for each susceptibility sources using single_susceptibility_gradient. The maximum out of these is returned.\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.Geometries.Internal.Susceptibility.Grid.susceptibility_off_resonance","page":"API","title":"MCMRSimulator.Geometries.Internal.Susceptibility.Grid.susceptibility_off_resonance","text":"susceptibility_off_resonance(susceptibility_grid, position[, inside])\n\nComputes the susceptibility off-resonance caused by a SusceptibilityGrid at given position.\n\nThe field is computed in ppm. Knowledge of the scanner B0 is needed to convert it into KHz.\n\n\n\n\n\n","category":"function"},{"location":"api/#MCMRSimulator.Spins","page":"API","title":"MCMRSimulator.Spins","text":"Types:\n\nSnapshot\nSpin\nSpinOrientation\nFixedXoshiro\n\nMethods:\n\nlongitudinal\ntransverse\nphase\norientation\nisinside\nstuck\nstuck_to\nget_sequence\n\n\n\n\n\n","category":"module"},{"location":"api/#MCMRSimulator.Spins.FixedXoshiro","page":"API","title":"MCMRSimulator.Spins.FixedXoshiro","text":"Immutable version of the Xoshiro random number generator state\n\nUsed to store the current state in the Spin object. To evolve the spin in a predictable manner set the seed using copy!(spin.rng, Random.TaskLocalRNG).\n\n\n\n\n\n","category":"type"},{"location":"api/#MCMRSimulator.Spins.Snapshot","page":"API","title":"MCMRSimulator.Spins.Snapshot","text":"Represents the positions and orientations of multiple Spin objects at a specific time.\n\nNote that times are in milliseconds and positions in micrometer.  The equilibrium longitudinal spin (after T1 relaxation) is always 1.\n\nUseful constructors\n\nSnapshot(positions; time=0., longitudinal=1., transverse=0., phase=0., nsequences=1)\nSnapshot(nspins[, bounding_box[, geometry]]; time=0., longitudinal=1., transverse=0., phase=0., nsequences=1)\nSnapshot(nspins, simulation[, bounding_box; time=0., longitudinal=1., transverse=0., phase=0., nsequences=1)\n\nCreates a new Snapshot at the given time with spins initialised for simulating nsequences sequences. All spins will start out in equilibrium, but that can be changed using the longitudinal, transverse, and/or phase flags. This initial spin locations are given by positions (Nx3 matrix or sequence of vectors of size 3). Alternatively the number of spins can be given in which case the spins are randomly distributed in the given bounding_box (default: 1x1x1 mm box centered on origin). The bounding_box can be a BoundingBox object, a tuple with the lower and upper bounds (i.e., two vectors of length 3) or a number r (resulting in spins filling a cube from -r to +r)\n\nSnapshot(snap::Snapshot{1}, nsequences)\n\nReplicates the positions and orientations for a single sequence in the input snapshot across nsequences.\n\nExtracting summary information\n\nlongitudinal(snapshot) to get the nsequences spin magnitudes in the z-direction (equilibrium of 1) averaged over all spins\ntransverse(snapshot) to get the nsequences spin magnitudes in the x-y-plane averaged over all spins\nphase(snapshot) to get the nsequences spin angles in x-y plane (in degrees) averaged over all spins\norientation(snapshot) to get a (nsequencesx3) matrix with the spin orientations in 3D space averaged over all spins\nSpinOrientation(snapshot) to get a nsequences vector of [SpinOrientation] objects with the average spin orientation across all spins\nposition.(snapshot) to get a the position for each spin in a vector (no averaging applied)\n\nInformation for a single sequence can be extracted by calling get_sequence first.\n\n\n\n\n\n","category":"type"},{"location":"api/#MCMRSimulator.Spins.Spin","page":"API","title":"MCMRSimulator.Spins.Spin","text":"Spin particle with a position and nsequences spin orientations (stored as SpinOrientation).\n\nA random number generator is stored in the Spin object as well, which will be used for evolving the spin into the future in a reproducible manner.\n\nConstructors\n\nSpin(;nsequences=1, position=[0, 0, 0], longitudinal=1., transverse=0., phase=0.)\n\nCreates a new spin with nsequences identical spin orientations (given by longitudinal, transverse, and phase flags). The spin will start at given position.\n\nSpin(reference_spin::Spin{1}, nsequences)\n\nCreate a new spin with the same position as reference_spin with the orientation of reference_spin replicated nsequences times.\n\nExtracting spin information\n\nlongitudinal to get the nsequences spin magnitudes in the z-direction (equilibrium of 1)\ntransverse to get the nsequences spin magnitudes in the x-y-plane\nphase to get the nsequences spin angles in x-y plane (in degrees)\norientation to get a (nsequencesx3) matrix with the spin orientations in 3D space\nposition to get a length-3 vector with spin location\n\n\n\n\n\n","category":"type"},{"location":"api/#MCMRSimulator.Spins.SpinOrientation","page":"API","title":"MCMRSimulator.Spins.SpinOrientation","text":"SpinOrientation(longitudinal, transverse, phase)\n\nThe spin orientation. Usually created as part of a Spin object.\n\nSpinOrientation(snapshot::Snapshot)\n\nReturns the average spin orientations of all Spin objects in the Snapshot.\n\nThis information can be extracted using:\n\nlongitudinal to get the spin in the z-direction (equilibrium of 1)\ntransverse to get the spin in the x-y-plane\nphase to get the spin angle in x-y plane (in degrees)\norientation to get the spin orientation as a length-3 vector\n\n\n\n\n\n","category":"type"},{"location":"api/#MCMRSimulator.Spins.SpinOrientationSum","page":"API","title":"MCMRSimulator.Spins.SpinOrientationSum","text":"SpinOrientationSum(snapshot)\n\nComputes the total signal and the number of spins in a Snapshot. The number of spins can be found by running length(spin_orientation_sum). The spin orientation information can be found in the same way as for SpinOrientation, namely by calling transverse, longitudinal, or phase.\n\n\n\n\n\n","category":"type"},{"location":"api/#MCMRSimulator.Geometries.Internal.BoundingBoxes.isinside-Tuple{Any, AbstractVector}","page":"API","title":"MCMRSimulator.Geometries.Internal.BoundingBoxes.isinside","text":"isinside([geometry, ]spin)\n\nReturns vector of obstructions that the spin is inside. If geometry is not provided, will return a vector of indices instead. If a non-fixed geometry is provided, will return the number of obstructions that the spin is inside.\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.Methods.phase","page":"API","title":"MCMRSimulator.Methods.phase","text":"phase(spin)\nphase(snapshot)\n\nReturns the phase in the x-y plane of the spin for a single particle (Spin) or averaged across a group of particles in a [Snapshot]. When orientations for multiple sequences are available  an array of phase values is returned with a value for each sequence.\n\n\n\n\n\n","category":"function"},{"location":"api/#MCMRSimulator.Properties.R1","page":"API","title":"MCMRSimulator.Properties.R1","text":"R1(spin, geometry, global_properties)\nR1(position, geometry, global_properties[, stuck_to])\n\nReturns the R1 experienced by the Spin given the surface and volume properties of the FixedGeometry. Alternatively, the position of the spin can be provided. In this case the Reflection should also be returned for a bound spin.\n\n\n\n\n\n","category":"function"},{"location":"api/#MCMRSimulator.Properties.R2","page":"API","title":"MCMRSimulator.Properties.R2","text":"R2(spin, geometry, global_properties)\nR2(position, geometry, global_properties[, stuck_to])\n\nReturns the R2 experienced by the Spin given the surface and volume properties of the FixedGeometry. Alternatively, the position of the spin can be provided. In this case the Reflection should also be returned for a bound spin.\n\n\n\n\n\n","category":"function"},{"location":"api/#MCMRSimulator.Properties.off_resonance","page":"API","title":"MCMRSimulator.Properties.off_resonance","text":"off_resonance(spin, geometry, global_properties)\noff_resonance(position, geometry, global_properties[, stuck_to])\n\nReturns the off_resonance experienced by the Spin given the surface and volume properties of the FixedGeometry. Alternatively, the position of the spin can be provided. In this case the Reflection should also be returned for a bound spin.\n\n\n\n\n\n","category":"function"},{"location":"api/#MCMRSimulator.Spins.get_sequence-Tuple{Spin, Any}","page":"API","title":"MCMRSimulator.Spins.get_sequence","text":"get_sequence(spin, sequence_index)\nget_sequence(snapshot, sequence_index)\n\nExtracts the spin orientation corresponding to a specific sequence, where the sequence index uses the order in which the sequences where provided in the Simulation.\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.Spins.longitudinal","page":"API","title":"MCMRSimulator.Spins.longitudinal","text":"longitudinal(spin)\nlongitudinal(snapshot)\n\nReturns the longitudinal magnitude of the spin (i.e., magnitude aligned with the magnetic field) for a single particle (Spin) or averaged across a group of particles in a [Snapshot]. When orientations for multiple sequences are available an array of longitudinal values is returned with a value for each sequence.\n\n\n\n\n\n","category":"function"},{"location":"api/#MCMRSimulator.Spins.orientation","page":"API","title":"MCMRSimulator.Spins.orientation","text":"orientation(spin)\norientation(snapshot)\n\nReturns the spin orientation as a length-3 vector for a single particle (Spin) or averaged across a group of particles in a [Snapshot]. When orientations for multiple sequences are available an array of vectors is returned with a value for each sequence.\n\n\n\n\n\n","category":"function"},{"location":"api/#MCMRSimulator.Spins.position-Tuple{Snapshot}","page":"API","title":"MCMRSimulator.Spins.position","text":"position.(s::Snapshot)\n\nReturns all the positions of the spin particles as a vector of length-3 vectors.\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.Spins.position-Tuple{Spin}","page":"API","title":"MCMRSimulator.Spins.position","text":"position(s::Spin)\n\nReturns the position of the spin particle as a vector of length 3.\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.Spins.stuck-Tuple{Spin}","page":"API","title":"MCMRSimulator.Spins.stuck","text":"stuck(spin)\n\nReturns true if the spin is stuck on the surface. This can be used to filter a Snapshot using:\n\nonly_stuck = filter(stuck, snapshot)\nonly_free = filter(s -> !stuck(s), snapshot)\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.Spins.stuck_to-Tuple{Spin, Any}","page":"API","title":"MCMRSimulator.Spins.stuck_to","text":"stuck_to(spin, geometry)\n\nReturn the internal representation of the obstruction the spin is stuck to. Raises an error if the spin is free.\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.Spins.stuck_to-Tuple{Spin}","page":"API","title":"MCMRSimulator.Spins.stuck_to","text":"stuck_to(spin)\n\nReturn the indices of the obstruction the spin is stuck to. Will return (0, 0) for a free spin.\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.Spins.transverse","page":"API","title":"MCMRSimulator.Spins.transverse","text":"transverse(spin)\ntransverse(snapshot)\n\nReturns the transverse spin (i.e., magnitude in the plane perpendicular to the magnetic field) for a single particle (Spin) or averaged across a group of particles in a [Snapshot]. When orientations for multiple sequences are available an array of transverse values is returned with a value for each sequence.\n\n\n\n\n\n","category":"function"},{"location":"api/#MCMRSimulator.TimeSteps.TimeStep","page":"API","title":"MCMRSimulator.TimeSteps.TimeStep","text":"TimeStep(simulation; timestep=Inf, turtoisity_precision=3e-2 * <precision>, gradient_precision=1e-4 * <precision>, precision=1.)\n\nCreates an object controlling the timestep of the MCMR simulation.\n\nAt any time the timestep is guaranteed to be shorter than:\n\nuser-provided value of timestep (in ms).\nFullTimeStep.turtoisity_precision * size_scale(geometry)^2 / D, where size_scale is the average size of the obstructions and D is the diffusivity.\ntimestep that would allow permeability or magnetisation transfer probability to be close to 1.\n(FullTimeStep.gradient_precision /( D * \\gamma^2 * G^2))^(1//3), where \\gamma is the gyromagnetic_ratio and G is the current gradient_strength.\n\n\n\n\n\n","category":"type"},{"location":"api/#MCMRSimulator.Relax.relax!-Union{Tuple{N}, Tuple{Spin{N}, Union{Nothing, Bool, StaticArraysCore.SVector{3, Float64}}, Simulation{N, NG} where NG, MCMRSimulator.SequenceParts.MultSequencePart{N}, Float64, Float64, StaticArraysCore.SizedVector{N, Float64, TData} where TData<:AbstractVector{Float64}}} where N","page":"API","title":"MCMRSimulator.Relax.relax!","text":"relax!(spin, new_pos, simulations, sequence_parts, t1, t2, B0s)\n\nEvolves a spin during part of a sequence represented a MultSequencePart (containing one SequencePart for each SpinOrientation in the Spin).\n\nThe spin is evolved for the duration from t1 and t2, where t=0 corresponds to the start of the sequence part and t=1 to the end. The spin is assumed to travel from spin.position to new_pos during this period.\n\nThe spin will precess around an effective RF pulse and relax with a given R1 and R2. The R1 and R2 are determined based on the Simulation parameters, potentially influenced by the geometry. The effective RF pulse is determined by the sequence and any changes in the off-resonance field due to the geometry or set in the Simulation.\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.Relax.transfer!-Tuple{SpinOrientation, Float64}","page":"API","title":"MCMRSimulator.Relax.transfer!","text":"transfer!(orientation, MT_fraction)\n\nLoses MT_fraction spin from orientation.\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.SequenceParts.ConstantPulse","page":"API","title":"MCMRSimulator.SequenceParts.ConstantPulse","text":"ConstantPulse(amplitude, phase, frequency)\n\nStores the RF pulse state during a single timestep.\n\nIt contains:\n\namplitude of RF pulse in kHz (assumed to be constant over the timestep).\nphase of the RF pulse at the beginning of the timestep in degrees.\noff-resonance frequency of the RF pulse in kHz.\n\n\n\n\n\n","category":"type"},{"location":"api/#MCMRSimulator.SequenceParts.InstantSequencePart","page":"API","title":"MCMRSimulator.SequenceParts.InstantSequencePart","text":"InstantSequencePart(instants)\n\nA set of N instant pulses/gradients that should be applied to the spins.\n\nSome of the instants might be nothing.\n\n\n\n\n\n","category":"type"},{"location":"api/#MCMRSimulator.SequenceParts.MultSequencePart","page":"API","title":"MCMRSimulator.SequenceParts.MultSequencePart","text":"MultSequencePart(duration, parts)\n\nA set of N SequencePart objects representing overlapping parts of N sequences.\n\n\n\n\n\n","category":"type"},{"location":"api/#MCMRSimulator.SequenceParts.SequencePart","page":"API","title":"MCMRSimulator.SequenceParts.SequencePart","text":"A short part of the sequence that can be handled by the simulator.\n\nThere are 4 types:\n\nEmptyPart: no pulse or gradient\nContantPart: no pulse; constant gradient\nLinearPart: no pulse; linear gradient\nPulsePart: RF pulse; constant gradient\n\nTo break down a generic sequence in these parts will require some approximations.\n\n\n\n\n\n","category":"type"},{"location":"api/#MCMRSimulator.Simulations.Simulation","page":"API","title":"MCMRSimulator.Simulations.Simulation","text":"Simulation(\n    sequences; geometry=[], diffusivity=0.,\n    R1=0, T1=Inf, R2=0, T2=Inf, off_resonance=0, MT_fraction=0, permeability=0,, \n    max_timestep=<geometry-based default>, gradient_precision=1, rf_rotation=1.,\n)\n\nDefines the setup of the simulation and stores the output of the run.\n\nArgument\n\nGeneral parameters:\n\nsequences: Vector of Sequence objects. During the spin random walk the simulation will keep track of the spin magnetisations for all of the provided sequences.\ngeometry: Set of obstructions, which can be used to restrict the diffusion, produce off-resonance fields, alter the local T1/T2 relaxation, and as sources of magnetisation transfer.\ndiffusivity: Rate of the random motion of the spins in um^2/ms.\n\nMRI properties\n\nThese parameters determine the evolution and relaxation of the spin magnetisation.\n\nR1/T1: sets the longitudinal relaxation rate (R1 in kHz) or relaxation time (T1=1/R1 in ms). This determines how fast the longitudinal magnetisation returns to its equilibrium value of 1.\nR2/T2: sets the transverse relaxation rate (R2 in kHz) or relaxation time (T2=1/R2 in ms). This determines how fast the transverse magnetisation is lost.\noff_resonance: Size of the off-resonance field in this voxel in kHz.\n\nThese MRI properties can be overriden for spins inside the ObstructionGroup objects of the geometry.\n\nCollision parameters\n\nThese parameters determine how parameters behave when hitting the ObstructionGroup objects of the geoemtry. They can be overriden for individual objects for each [ObstructionGroup].\n\nMT_fraction: the fraction of magnetisation transfered between the obstruction and the water spin at each collision.\npermeability: the probability that the spin will pass through the obstruction.\nsurface_density: Density of spins stuck on the surface relative to the volume density of hte free water.\ndwell_time: Typical time that spins will stay at the surface after getting stuck.\n\nNote that MT_fraction and permeability are internally adjusted to make their effect independent of the timestep (see correct_for_timestep).\n\nTimestep parameters\n\nThese parameters (timestep, precision, gradient_precision, and turtoisity_precision) control the timepoints at which the simulation is evaluated. The default values should work well. For more details on how to adjust them, see TimeController.\n\nRunning the simulation\n\nTo run a Snapshot of spins through the simulations you can use one of the following functions:\n\nevolve: evolves the spins in the snapshot until a single given time and returns that state in a new Snapshot.\nreadout: evolves the spins to particular times in each TR and return the total signal at that time (or a Snapshot).\n\n\n\n\n\n","category":"type"},{"location":"api/#MCMRSimulator.Geometries.Internal.Susceptibility.Grid.susceptibility_off_resonance-Tuple{Simulation, Spin}","page":"API","title":"MCMRSimulator.Geometries.Internal.Susceptibility.Grid.susceptibility_off_resonance","text":"susceptibility_off_resonance(simulation, spin)\n\nComputes the susceptibility off-resonance caused by all susceptibility sources in the Simulation affecting the Spin\n\nThe field is computed in ppm. Knowledge of the scanner B0 is needed to convert it into KHz.\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.Subsets","page":"API","title":"MCMRSimulator.Subsets","text":"Support for selecting a subset of the total signal.\n\nTypes:\n\nSubset\n\nFunctions:\n\nget_subset\n\n\n\n\n\n","category":"module"},{"location":"api/#MCMRSimulator.Subsets.Subset","page":"API","title":"MCMRSimulator.Subsets.Subset","text":"Subset(; bound=nothing, inside=nothing, geometry_index=nothing, obstruction_index=nothing)\n\nThis creates a helper object to extract a subset of a Snapshot from the total snapshot. It defines which spins should be kept. This definition is determined by:\n\nbound: set to true to return only bound spins, to false to return only free spins (default: whether spins are bound is not relevant).\ninside: set to true to return only spins inside the geometry, to false to return only spins outside of the geometry (default: whether spins are inside or outside is not relevant).\ngeometry_index: set to an index to only consider that obstruction group within the total geometry (default: consider the full geometry).\nobstruction_index: set to an index to only consider that obstruction group within the total geometry (default: consider the full geometry).\n\n\n\n\n\n","category":"type"},{"location":"api/#MCMRSimulator.Subsets.get_subset-Tuple{Snapshot, Union{Tuple{Vararg{MCMRSimulator.Geometries.Internal.FixedObstructionGroups.FixedObstructionGroup, N}} where N, Simulation}}","page":"API","title":"MCMRSimulator.Subsets.get_subset","text":"get_subset(snapshot, simulation, subset)\nget_subset(snapshot, simulation; bound=nothing, inside=nothing, geometry_index=nothing, obstruction_index=nothing)\n\nReturns a subset of the Snapshot from the Simulation that obey some specific properties. These properties can be either defined by a Subset object or a set of keyword arguments.\n\nThese keyword arguments are:\n\nbound: set to true to return only bound spins, to false to return only free spins (default: whether spins are bound is not relevant).\ninside: set to true to return only spins inside the geometry, to false to return only spins outside of the geometry (default: whether spins are inside or outside is not relevant).\ngeometry_index: set to an index to only consider that obstruction group within the total geometry (default: consider the full geometry).\nobstruction_index: set to an index to only consider that obstruction group within the total geometry (default: consider the full geometry).\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.Evolve","page":"API","title":"MCMRSimulator.Evolve","text":"Defines the functions that run the actual simulation:\n\nreadout: get total signal or Snapshot at any Readout objects in the sequences.\nevolve: Return a single Snapshot with the state of the simulation at a given time. This snapshot can be used as initialisation for further runs.\n\nAll of these functions call evolve_to_time under the hood to actually run the simulation.\n\n\n\n\n\n","category":"module"},{"location":"api/#MCMRSimulator.Evolve.apply_instants!-Union{Tuple{N}, Tuple{Array{Spin{N}, 1}, MCMRSimulator.SequenceParts.InstantSequencePart{N}}} where N","page":"API","title":"MCMRSimulator.Evolve.apply_instants!","text":"apply_instants!(spins, instants)\n\nApply a set of N instants to a vector of spins for each of the N sequences being simulated.\n\nEach instant can be:\n\nnothing: do nothing\nMRIBuilder.Components.InstantPulse: apply RF pulse rotation\nMRIBuilder.Components.InstantGradient: add phase corresponding to gradient\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.Evolve.draw_step!-Union{Tuple{N}, Tuple{Array{Spin{N}, 1}, Simulation{N, NG} where NG, MCMRSimulator.SequenceParts.MultSequencePart{N}, StaticArraysCore.SizedVector{N, Float64, TData} where TData<:AbstractVector{Float64}}} where N","page":"API","title":"MCMRSimulator.Evolve.draw_step!","text":"draw_step!(spin(s), simulation, mult_sequence_part, B0s)\n\nUpdates the spin based on a random movement through the given geometry for a given timestep:\n\ndraws the next location of the particle after timestep with given simulation.diffusivity.   This displacement will take into account the obstructions in simulation.geometry.\nThe spin orientation will be affected by relaxation (see relax!) and potentially by magnetisation transfer during collisions.\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.Evolve.evolve-Union{Tuple{N}, Tuple{Any, Simulation{N, NG} where NG}, Tuple{Any, Simulation{N, NG} where NG, Any}} where N","page":"API","title":"MCMRSimulator.Evolve.evolve","text":"evolve(snapshot, simulation[, new_time]; bounding_box=<1x1x1 mm box>)\n\nEvolves the Snapshot through the Simulation to a new time. Returns a Snapshot at the new time, which can be used as a basis for further simulation. If undefined new_time will be set to the start of the next TR.\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.Evolve.evolve_to_time-Union{Tuple{N}, Tuple{Snapshot{N}, Simulation{N, NG} where NG, Float64}} where N","page":"API","title":"MCMRSimulator.Evolve.evolve_to_time","text":"evolve_to_time(snapshot, simulation, new_time)\n\nEvolves the full Snapshot through the Simulation to the given new_time. Multi-threading is used to evolve multiple spins in parallel. This is used internally when calling any of the snapshot evolution methods (e.g., evolve).\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.Evolve.readout-Union{Tuple{N}, Tuple{Any, Simulation{N, NG} where NG}, Tuple{Any, Simulation{N, NG} where NG, Any}} where N","page":"API","title":"MCMRSimulator.Evolve.readout","text":"readout(spins, simulation[, readout_times]; bounding_box=<1x1x1 mm box>, skip_TR=0, nTR=1, return_snapshot=false, subset=<all>)\n\nEvolves a set of spins through the Simulation. Returns the total signal or a full Snapshot at every readout time in the simulated sequences over one or more repetition times (TRs).\n\nPositional arguments:\n\nspins: Number of spins to simulate or an already existing Snapshot.\nsimulation: Simulation object defining the environment, scanner, and sequence(s).\ntimes (optional): time of the readouts relative to the start of the TR (in ms). If not provided, the times of any Readout objects in the sequence will be used.\n\nKeyword arguments:\n\nbounding_box: size of the voxel in which the spins are initiated in um (default is 1000, corresponding to a 1x1x1 mm box centered on zero). Can be set to a BoundingBox object for more control.\nskip_TR: Number of repetition times to skip before starting the readout.    Even if set to zero (the default), the simulator will still skip the current TR before starting the readout    if the starting snapshot is from a time past one of the sequence readouts.\nnTR: number of TRs for which to store the output\nreturn_snapshot: set to true to output the state of all the spins as a Snapshot at each readout instead of a SpinOrientationSum with the total signal.\nsubset: Return the signal/snapshot for a subset of all spins. Can be set to a single or a vector of Subset objects. If set to a vector, this will add an attional dimension to the output.\n\nReturns\n\nThe function returns an up to 3-dimensional (KxLxMxN) array, with the following dimensions:\n\nK: the number of sequences. This dimension is not included if the simulation only contains a single sequencen (and this single sequence is not passed into the Simulation as a vector).\nL: the number of readout times with a single TR. This dimension is skipped if the readout_times is set to a scalar number. This dimension might contain nothings for sequences that contain fewer Readout objects than the maximum (M).\nM: the number of TRs (controlled by the nTR keyword). If nTR is not explicitly set by the user, this dimension is skipped.\nN: the number of subsets (controlled by the subset keyword). If subset is set to a single value (<all> by default), this dimension is skipped.\n\nBy default each element of this matrix is either a SpinOrientationSum with the total signal. If return_snapshot=true is set, each element is the full Snapshot instead.\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.Plot","page":"API","title":"MCMRSimulator.Plot","text":"This module contains the base plotting functions.\n\nIf Makie is not installed, none of the plotting functions will work. If a Makie backend is installed and importend, concrete methods will be added to these functions by the MakieMCMRSimulator extension. This makes Makie an optional dependency of MCMRSimulator, which will only be required if you want to use the MCMRSimulator plotting capabilities.\n\nIn addition to these empty plotting functions, this module defines the PlotPlane for any 2D-projections and helper functions to project onto this plane.\n\n\n\n\n\n","category":"module"},{"location":"api/#MCMRSimulator.Plot.PlotPlane","page":"API","title":"MCMRSimulator.Plot.PlotPlane","text":"Defines a finite plane in the 3D space used for plotting.\n\nConstructor\n\nPlotPlane(normal=[0, 0, 1], position=[0, 0, 0]; size=10., sizex=<size>, sizey=<size>, ngrid=100)\n\nArguments:\n\nnormal: length-3 vector with the orientation perpendicular to the plane (default to z-direction).\nposition: position of plane as a length-3 vector (defaults to origin).\nsizex: size of the plane in the x-direction (before rotating to normal).\nsizey: size of the plane in the y-direction (before rotating to normal).\nsize: set default value for sizex and sizey.\nngrid: number of grid elements to split the plane up into for plotting.\n\n\n\n\n\n","category":"type"},{"location":"api/#MCMRSimulator.Plot.plot_geometry-Tuple","page":"API","title":"MCMRSimulator.Plot.plot_geometry","text":"plot([plot_plane,] geometry; kwargs...)\nplot!([scene,] [plot_plane,] geometry; kwargs...)\nplot_geometry([plot_plane,] geometry; kwargs...)\nplot_geometry!([scene,] [plot_plane,] geometry; kwargs...)\n\nPlots a given geometry.  If a PlotPlane is provided the 2D projection of the geometry onto this plane is plotted. Otherwise, the geometry is plotted in 3D.\n\nIf you want to overlay the off-resonance field, call plot_off_resonance first before calling this function.\n\nThis function will only work if a Makie backend is imported.\n\nAttributes\n\ncolor: Set the color of the lines (2D) or patches (3D). In 2D it is set to the theme's linecolor by default. In 3D each individual obstruction is by default plotted in a different, distinguishable color.\nalpha: Set the transparancy in a 3D plot (0 being fully transparent and 1 fully opague).\nlinewidth: Set the linewidth in 2D plots.\nlinestyle: Set the linestyle in 2D plots.\n\n3D shading attributes\n\nshading = Makie.automatic sets the lighting algorithm used. Options are NoShading (no lighting), FastShading (AmbientLight + PointLight) or MultiLightShading (Multiple lights, GLMakie only). Note that this does not affect RPRMakie.\ndiffuse::Vec3f = Vec3f(1.0) sets how strongly the red, green and blue channel react to diffuse (scattered) light.\nspecular::Vec3f = Vec3f(0.4) sets how strongly the object reflects light in the red, green and blue channels.\nshininess::Real = 32.0 sets how sharp the reflection is.\nbacklight::Float32 = 0f0 sets a weight for secondary light calculation with inverted normals.\nssao::Bool = false adjusts whether the plot is rendered with ssao (screen space ambient occlusion). Note that this only makes sense in 3D plots and is only applicable with fxaa = true.\n\nGeneric attributes\n\nvisible::Bool = true sets whether the plot will be rendered or not.\noverdraw::Bool = false sets whether the plot will draw over other plots. This specifically means ignoring depth checks in GL backends.\ntransparency::Bool = false adjusts how the plot deals with transparency. In GLMakie transparency = true results in using Order Independent Transparency.\nfxaa::Bool = true adjusts whether the plot is rendered with fxaa (anti-aliasing).\ninspectable::Bool = true sets whether this plot should be seen by DataInspector.\ndepth_shift::Float32 = 0f0 adjusts the depth value of a plot after all other transformations, i.e. in clip space, where 0 <= depth <= 1. This only applies to GLMakie and WGLMakie and can be used to adjust render order (like a tunable overdraw).\nmodel::Makie.Mat4f sets a model matrix for the plot. This replaces adjustments made with translate!, rotate! and scale!.\nspace::Symbol = :data sets the transformation space for box encompassing the volume plot. See Makie.spaces() for possible inputs.\nclip_planes::Vector{Plane3f} = Plane3f[]: allows you to specify up to 8 planes behind which plot objects get clipped (i.e. become invisible). By default clip planes are inherited from the parent plot or scene.\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.Plot.plot_off_resonance-Tuple","page":"API","title":"MCMRSimulator.Plot.plot_off_resonance","text":"plot_off_resonance([plot_plane,] geometry; kwargs...)\nplot_off_resonance!([scene,] [plot_plane,] geometry; kwargs...)\n\nPlots the off-resonance field generated by a given geometry.  If a PlotPlane is provided the 2D projection of the geometry onto this plane is plotted. Otherwise, the geometry is plotted in 3D.\n\nThis function will only work if a Makie backend is imported.\n\nAttributes\n\nngrid=400 sets the number of points where the off-resonance field is evaluated before producing the image. Setting this to a higher number will produce a more accurate image of the off-resonance field at the cost of more computing power.\n\nColor attributes\n\ncolormap::Union{Symbol, Vector{<:Colorant}} = :viridis sets the colormap that is sampled for numeric colors. PlotUtils.cgrad(...), Makie.Reverse(any_colormap) can be used as well, or any symbol from ColorBrewer or PlotUtils. To see all available color gradients, you can call Makie.available_gradients().\ncolorscale::Function = identity color transform function. Can be any function, but only works well together with Colorbar for identity, log, log2, log10, sqrt, logit, Makie.pseudolog10 and Makie.Symlog10.\ncolorrange::Tuple{<:Real, <:Real} sets the values representing the start and end points of colormap.\nnan_color::Union{Symbol, <:Colorant} = RGBAf(0,0,0,0) sets a replacement color for color = NaN.\nlowclip::Union{Nothing, Symbol, <:Colorant} = nothing sets a color for any value below the colorrange.\nhighclip::Union{Nothing, Symbol, <:Colorant} = nothing sets a color for any value above the colorrange.\nalpha = 1.0 sets the alpha value of the colormap or color attribute. Multiple alphas like in plot(alpha=0.2, color=(:red, 0.5), will get multiplied.\n\nGeneric attributes\n\nvisible::Bool = true sets whether the plot will be rendered or not.\noverdraw::Bool = false sets whether the plot will draw over other plots. This specifically means ignoring depth checks in GL backends.\ntransparency::Bool = false adjusts how the plot deals with transparency. In GLMakie transparency = true results in using Order Independent Transparency.\nfxaa::Bool = true adjusts whether the plot is rendered with fxaa (anti-aliasing).\ninspectable::Bool = true sets whether this plot should be seen by DataInspector.\ndepth_shift::Float32 = 0f0 adjusts the depth value of a plot after all other transformations, i.e. in clip space, where 0 <= depth <= 1. This only applies to GLMakie and WGLMakie and can be used to adjust render order (like a tunable overdraw).\nmodel::Makie.Mat4f sets a model matrix for the plot. This replaces adjustments made with translate!, rotate! and scale!.\nspace::Symbol = :data sets the transformation space for box encompassing the volume plot. See Makie.spaces() for possible inputs.\nclip_planes::Vector{Plane3f} = Plane3f[]: allows you to specify up to 8 planes behind which plot objects get clipped (i.e. become invisible). By default clip planes are inherited from the parent plot or scene.\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.Plot.plot_sequence-Tuple","page":"API","title":"MCMRSimulator.Plot.plot_sequence","text":"plot(sequence; kwargs...)\nplot!([scene,] sequence; kwargs...)\nplot_sequence(sequence; kwargs...)\nplot_sequence!([scene,] sequence; kwargs...)\n\nPlot the sequence diagram.\n\nThis function will only work if Makie is installed and imported.\n\nAttributes\n\nLine properties\n\nlinecolor sets the color of the lines. If you want to set the text color to the same value, you can also use color=....\nlinewidth=1.5 sets the width of the lines.\ninstant_width=3. sets the width of any instant gradients or pulses with respect to the linewidth.\nreadout_linestyle sets the linestyle used to mark the sequence readouts (:dot by default).\n\nText properties\n\ntextcolor sets the color of the text. If you want to set the line color to the same value, you can also use color=....\nfont sets whether the rendered text is :regular, :bold, or :italic.\nfontsize: set the size of each character.\n\nGeneric attributes\n\nvisible::Bool = true sets whether the plot will be rendered or not.\noverdraw::Bool = false sets whether the plot will draw over other plots. This specifically means ignoring depth checks in GL backends.\ntransparency::Bool = false adjusts how the plot deals with transparency. In GLMakie transparency = true results in using Order Independent Transparency.\nfxaa::Bool = true adjusts whether the plot is rendered with fxaa (anti-aliasing).\ninspectable::Bool = true sets whether this plot should be seen by DataInspector.\ndepth_shift::Float32 = 0f0 adjusts the depth value of a plot after all other transformations, i.e. in clip space, where 0 <= depth <= 1. This only applies to GLMakie and WGLMakie and can be used to adjust render order (like a tunable overdraw).\nmodel::Makie.Mat4f sets a model matrix for the plot. This replaces adjustments made with translate!, rotate! and scale!.\nspace::Symbol = :data sets the transformation space for box encompassing the volume plot. See Makie.spaces() for possible inputs.\nclip_planes::Vector{Plane3f} = Plane3f[]: allows you to specify up to 8 planes behind which plot objects get clipped (i.e. become invisible). By default clip planes are inherited from the parent plot or scene.\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.Plot.plot_snapshot-Tuple","page":"API","title":"MCMRSimulator.Plot.plot_snapshot","text":"plot([plot_plane], snapshot; kind=:scatter, kwargs...)\nplot!([scene,] [plot_plane], snapshot; kind=:scatter, kwargs...)\nplot_snapshot([plot_plane], snapshot; kind=:scatter, kwargs...)\nplot_snapshot!([scene,] [plot_plane], snapshot; kind=:scatter, kwargs...)\n\nPlots a Snapshot in a new plot. \n\nThe spins are plotted in 2D projected onto the PlotPlane if one is provided. Otherwise, the spins are plotted in 3D (does not work for kind=:image).\n\nThere are three kinds of snapshot plots available:\n\nScatter plot\n\nDefault (or set using kind=:scatter). Each spin is plotted as a point with the colour set by the transverse magnetisation. Additional keywords are passed on to Makie.scatter (namely, marker, markersize, strokecolor, strokewidth, glowcolor, glowwidth).\n\nDyad plot\n\nSet using kind=:dyad. Each spin is plotted as a dyad. For a 2D dyad the orienation is set by the transverse magnetisation. For a 3D dyad the full magnetisation is used to set the orienation. Additional keywords are passed on to Makie.arrows (namely, arrowsize, arrowhead, arrowtail, linestyle, lengthscale, quality, markerspace, diffuse, specular, shininess).\n\nImage\n\nSet using kind=:image. The average magnetisation is plotted across the PlotPlane.  The colour in each pixel is set by the average transverse magnetisation of the local spins. Set interpolate=false to disable interpolating the colors. This plot will not work in 3D (i.e., a PlotPlane is required).\n\nThis function will only work if Makie is installed and imported.\n\nGeneric attributes\n\nvisible::Bool = true sets whether the plot will be rendered or not.\noverdraw::Bool = false sets whether the plot will draw over other plots. This specifically means ignoring depth checks in GL backends.\ntransparency::Bool = false adjusts how the plot deals with transparency. In GLMakie transparency = true results in using Order Independent Transparency.\nfxaa::Bool = true adjusts whether the plot is rendered with fxaa (anti-aliasing).\ninspectable::Bool = true sets whether this plot should be seen by DataInspector.\ndepth_shift::Float32 = 0f0 adjusts the depth value of a plot after all other transformations, i.e. in clip space, where 0 <= depth <= 1. This only applies to GLMakie and WGLMakie and can be used to adjust render order (like a tunable overdraw).\nmodel::Makie.Mat4f sets a model matrix for the plot. This replaces adjustments made with translate!, rotate! and scale!.\nspace::Symbol = :data sets the transformation space for box encompassing the volume plot. See Makie.spaces() for possible inputs.\nclip_planes::Vector{Plane3f} = Plane3f[]: allows you to specify up to 8 planes behind which plot objects get clipped (i.e. become invisible). By default clip planes are inherited from the parent plot or scene.\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.Plot.plot_trajectory-Tuple","page":"API","title":"MCMRSimulator.Plot.plot_trajectory","text":"plot([plot_plane], snapshots; kwargs...)\nplot!([scene,] [plot_plane], snapshots; kwargs...)\nplot_trajectory([plot_plane], snapshots; kwargs...)\nplot_trajectory!([scene,] [plot_plane], snapshots; kwargs...)\n\nPlots the spin trajectory in a vector of Snapshot on an existing plot scene.\n\nThe spins are plotted in 2D projected onto the PlotPlane if one is provided. Otherwise, the spins are plotted in 3D. At each location along the trajectory, the colour is set by the transverse magnetisation. Additional keywords are passed on to Makie.lines!.\n\nThis function will only work if Makie is installed and imported.\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.Plot.project_on_grid-Tuple{PlotPlane, Snapshot{1}, Int64}","page":"API","title":"MCMRSimulator.Plot.project_on_grid","text":"project_on_grid(plot_plane, snap, ngrid)\n\nSpins from the Snapshot are projected onto the grid defined by PlotPlane in two ways:\n\nalong the normal spins are projected onto the plane from infinitely far (TODO: give finite extent)\nin the other directions any spins are projected onto the plane using mod(position[1], sizex) and mod(position[2], sizey).   This assumes that the geometry and field repeats itself ad infinitum beyond the PlotPlane (TODO: allow this assumption to be turned off).\n\nIn effect, this means that all spins are projected onto the PlotPlane. The average spin orientation in each grid cell is returned.\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.Plot.simulator_movie","page":"API","title":"MCMRSimulator.Plot.simulator_movie","text":"simulator_movie(filename, simulation, times, size; resolution=(1600, 800), trajectory_init=30, signal_init=10000, framerate=50, plane_orientation=:z, kwargs...)\n\nWrites a movie of the Simulation to the given filename.\n\nEach frame of the movie shows the Snapshot at given times. size is a tuple with the size of the plotted region in the x- and y-direction. If there is a repeating geometry, then it is strongly recommended to use the size of the repeat for size.\n\nKeyword arguments:\n\nresolution: pixel resolution of each frame in the movie.\ntrajectory_init: how many spins to plot on each frame.\nsignal_init: how many spins to use to evaluate the signal evolution.\nframerate: wait time between each subsequent frame in the movie.\nplane_orientation: orienation of the plane on which the spins are projected (see PlotPlane).\n\nAdditional keyword arguments are passed on to plot_snapshot!.\n\nThis function will only work if Makie is installed and imported.\n\n\n\n\n\n","category":"function"},{"location":"api/#MCMRSimulator.CLI","page":"API","title":"MCMRSimulator.CLI","text":"Defines the command line interface to MCMRSimulator.jl (mcmr).\n\nFunctions:\n\nrun_main\n\n\n\n\n\n","category":"module"},{"location":"api/#MCMRSimulator.CLI.install_cli-Tuple{}","page":"API","title":"MCMRSimulator.CLI.install_cli","text":"install_cli()\n\nInstalls the command line interface for \n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.CLI.run_main","page":"API","title":"MCMRSimulator.CLI.run_main","text":"run_main(args=ARGS; kwargs...)\n\nMain run command for the command line interface.\n\nAny keyword arguments are passed on to ArgParse.ArgParseSettings.\n\n\n\n\n\n","category":"function"},{"location":"api/#MCMRSimulator.CLI.run_main_docs-Tuple{AbstractString}","page":"API","title":"MCMRSimulator.CLI.run_main_docs","text":"run_main_test(cmd::AbstractString)\n\nReturns markdown with the stdout and stderr produced by running run_main on the given command. This is used for testing of the command line interface\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.CLI.run_main_test-Tuple{AbstractString}","page":"API","title":"MCMRSimulator.CLI.run_main_test","text":"run_main_test(cmd::AbstractString)\n\nReturns the stdout and stderr produced by running run_main on the given command. This is used for testing of the command line interface\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.CLI.Geometry","page":"API","title":"MCMRSimulator.CLI.Geometry","text":"Defines command line interface for mcmr geometry\n\n\n\n\n\n","category":"module"},{"location":"api/#MCMRSimulator.CLI.Geometry.get_parser-Tuple{}","page":"API","title":"MCMRSimulator.CLI.Geometry.get_parser","text":"get_parser()\n\nReturns the parser of arguments for mcmr geometry\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.CLI.Geometry.parse_user_argument-Tuple{Any, Any}","page":"API","title":"MCMRSimulator.CLI.Geometry.parse_user_argument","text":"parse_user_argument(value, n_objects)\n\nParse the user argument to something that can actually be used internally by Julia.\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.CLI.Geometry.run_main","page":"API","title":"MCMRSimulator.CLI.Geometry.run_main","text":"run_main([arguments])\n\nRuns the mcmr geometry command line interface. The supplied arguments can be provided as a sequence of strings (as provided by the terminal) or as a dictionary (as provided by ArgParse after parsing). By default it is set to ARGS.\n\n\n\n\n\n","category":"function"},{"location":"api/#MCMRSimulator.CLI.Run","page":"API","title":"MCMRSimulator.CLI.Run","text":"Defines the command line interface to mcmr run.\n\n\n\n\n\n","category":"module"},{"location":"api/#MCMRSimulator.CLI.Run.add_init_flags!-Tuple{Any}","page":"API","title":"MCMRSimulator.CLI.Run.add_init_flags!","text":"Add initialisation flags to an argument parser.\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.CLI.Run.add_output_flags!-Tuple{Any}","page":"API","title":"MCMRSimulator.CLI.Run.add_output_flags!","text":"Add output flags to an argument parser.\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.CLI.Run.add_readout_flags!-Tuple{Any}","page":"API","title":"MCMRSimulator.CLI.Run.add_readout_flags!","text":"Add readout flags to an argument parser.\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.CLI.Run.add_simulation_definition!-Tuple{Any}","page":"API","title":"MCMRSimulator.CLI.Run.add_simulation_definition!","text":"Add simulation definition parameters to an argument parser.\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.CLI.Run.get_parser-Tuple{}","page":"API","title":"MCMRSimulator.CLI.Run.get_parser","text":"get_parser()\n\nReturns the parser of arguments for mcmr run\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.CLI.Run.read_bvecs-Tuple{Any}","page":"API","title":"MCMRSimulator.CLI.Run.read_bvecs","text":"read_bvecs(filename)\n\nReads the bvecs into a Nx3 matrix.\n\n\n\n\n\n","category":"method"},{"location":"api/#MCMRSimulator.CLI.Run.run_main","page":"API","title":"MCMRSimulator.CLI.Run.run_main","text":"run_main([arguments])\n\nRuns the mcmr run command line interface. The supplied arguments can be provided as a sequence of strings (as provided by the terminal) or as a dictionary (as provided by ArgParse after parsing). By default it is set to ARGS.\n\n\n\n\n\n","category":"function"},{"location":"geometry/#geometry","page":"Geometry","title":"Obstructions to free diffusion","text":"","category":"section"},{"location":"geometry/","page":"Geometry","title":"Geometry","text":"MCMRSimulator.jl comes with a variety of basic components that can be used to represent various components in the tissue microstructure.","category":"page"},{"location":"geometry/","page":"Geometry","title":"Geometry","text":"Component: infinite walls hollow cylinder myelinated annuli hollow sphere mesh bendy cylinder\nConstructor (Julia) Walls Cylinders Annuli Spheres Mesh BendyCylinder\nConstructor (CLI) mcmr geometry create walls mcmr geometry create cylinders or mcmr geometry create-random cylinders mcmr geometry create annuli or mcmr geometry create-random annuli mcmr geometry create spheres or mcmr geometry create-random spheres Generate mesh from tissue samples or generative models (e.g., (Palombo et al., 2019), (Ginsburger et al., 2019), (Callaghan et al., 2020), (Villarreal-Haro et al., 2023)) mcmr geometry create bendy-cylinder\nHinder diffusion ✅ ✅  ✅ ✅ ✅\nSurface relaxation ✅ ✅  ✅ ✅ ✅\nMagnetisation transfer ✅ ✅  ✅ ✅ ✅\nGenerate off-resonance field  ✅ ✅  ✅ ✅\nDifferent relaxation inside  ✅ ✅ ✅ ✅ ✅\nIntrinsic dimensionality 1 2 2 3 3 3","category":"page"},{"location":"geometry/","page":"Geometry","title":"Geometry","text":"The constructors for these components all have a similar interface. Some expect certain component-specific keyword arguments (e.g., radius for Spheres and Cylinders, or the keywords regarding the myelin-induced off-resonance field produced by Cylinders or Annuli). MRI relaxation properties within the obstruction and collision parameters (stuck spins, magnetisation transfer rate & permeability) can be set using keyword arguments as described in the properties section. Finally, these constructors expect a set of keyword arguments that control their location. These arguments are identicaly across all constructors (although the expected input depends on the dimensionality of the component as listed in the table above):","category":"page"},{"location":"geometry/","page":"Geometry","title":"Geometry","text":"position: Set the positions for each generated components (not used in Mesh).\nrepeats: Set the distance with which all components should be repeated.\nrotation: Applies a single rotation to the whole system.","category":"page"},{"location":"geometry/","page":"Geometry","title":"Geometry","text":"Components with a lower dimensionality are defined by default along the x-axis (for dimensionality of 1) or the x-y plane (for dimensionality of 2).  In other words, the normal of the Walls point in the x-axis by default, while the Cylinders point in the z-axis. Shifts and repeats should only be provided in this lower-dimensional space. The rotation keyword can be used to define these components along other lines/planes (see get_rotation).","category":"page"},{"location":"geometry/","page":"Geometry","title":"Geometry","text":"From the command line all of these keywords are available as flags, which can be seen by running:","category":"page"},{"location":"geometry/","page":"Geometry","title":"Geometry","text":"mcmr geometry create walls/cylinders/annuli/spheres/bendy_cylinder --help","category":"page"},{"location":"geometry/","page":"Geometry","title":"Geometry","text":"In Julia, the easiest way to get the documentation for all keywords is to run:","category":"page"},{"location":"geometry/","page":"Geometry","title":"Geometry","text":"?Walls/Cylinders/Annuli/Spheres/Mesh/BendyCylinder","category":"page"},{"location":"geometry/","page":"Geometry","title":"Geometry","text":"or by following the links in the table above.","category":"page"},{"location":"geometry/","page":"Geometry","title":"Geometry","text":"For example, we can create two base cylinders, which repeat infinitely by running:","category":"page"},{"location":"geometry/","page":"Geometry","title":"Geometry","text":"using MCMRSimulator\ngeometry = Cylinders(radius=sqrt(0.5), position=[[0, 0], [1, 1]], repeats=[2, 2])\nusing CairoMakie # hide\nf = plot(PlotPlane(size=4), geometry) # hide\nsave(\"regular_cylinders.png\", f) # hide\nnothing # hide","category":"page"},{"location":"geometry/","page":"Geometry","title":"Geometry","text":"(Image: Plot showing two cylinders repeating ad infinitum)","category":"page"},{"location":"geometry/","page":"Geometry","title":"Geometry","text":"Alternatively, the same configuration could be produced with a single cylinder by providing a rotation.","category":"page"},{"location":"geometry/","page":"Geometry","title":"Geometry","text":"using MCMRSimulator\nrotation = [\n    sqrt(0.5) sqrt(0.5) 0.\n    -sqrt(0.5) sqrt(0.5) 0.\n    0. 0. 1.\n    ]\ngeometry = Cylinders(radius=sqrt(0.5), repeats=[sqrt(2), sqrt(2)], rotation=rotation)\nusing CairoMakie # hide\nf = plot(PlotPlane(size=4), geometry) # hide\nsave(\"regular_cylinders2.png\", f) # hide\nnothing # hide","category":"page"},{"location":"geometry/","page":"Geometry","title":"Geometry","text":"(Image: Plot showing single cylinders repeating ad infinitum)","category":"page"},{"location":"geometry/#Randomly-distributed-cylinders/annuli/spirals","page":"Geometry","title":"Randomly distributed cylinders/annuli/spirals","text":"","category":"section"},{"location":"geometry/","page":"Geometry","title":"Geometry","text":"A random set of positions and radii can be created using random_positions_radii. The user in this case sets a target density (70% in the example below) and over which length scale the configuration should repeat itself (20x20 micrometer in the example below).","category":"page"},{"location":"geometry/","page":"Geometry","title":"Geometry","text":"using MCMRSimulator # hide\nusing Random; Random.seed!(1234) # hide\n(positions, outer_radii) = random_positions_radii((20, 20), 0.7, 2)\nnothing # hide","category":"page"},{"location":"geometry/","page":"Geometry","title":"Geometry","text":"From the command line this functionality is available by running mcmr geometry create-random cylinders/annuli/spheres.","category":"page"},{"location":"geometry/","page":"Geometry","title":"Geometry","text":"These can be used to produce randomly distributed cylinders:","category":"page"},{"location":"geometry/","page":"Geometry","title":"Geometry","text":"geometry = Cylinders(radius=outer_radii, position=positions, repeats=(20, 20))\nusing CairoMakie # hide\nf = plot(PlotPlane(size=20), geometry) # hide\nsave(\"random_cylinders.png\", f) # hide\nnothing # hide","category":"page"},{"location":"geometry/","page":"Geometry","title":"Geometry","text":"(Image: Illustrating configuration of random cylinders)","category":"page"},{"location":"geometry/","page":"Geometry","title":"Geometry","text":"When used as initialisation for annuli or spirals, an inner radius will also need to be computed:","category":"page"},{"location":"geometry/","page":"Geometry","title":"Geometry","text":"geometry = Annuli(inner=0.8 .* outer_radii, outer=outer_radii, position=positions, repeats=(20, 20))\nusing CairoMakie # hide\nf = plot(PlotPlane(size=20), geometry) # hide\nsave(\"random_annuli.png\", f) # hide\nnothing # hide","category":"page"},{"location":"geometry/","page":"Geometry","title":"Geometry","text":"(Image: Illustrating configuration of random annuli)","category":"page"},{"location":"tutorial_cli/#tutorial_cli","page":"Tutorial (CLI)","title":"Tutorial","text":"","category":"section"},{"location":"tutorial_cli/","page":"Tutorial (CLI)","title":"Tutorial (CLI)","text":"This tutorial will walk through an example of modelling the MRI signal evolution for a diffusion-weighted sequence. The spins in this simulation will be constrained by regularly packed cylinders. This tutorial will use the command line interface, which we assume is available through the mcmr command (see installation instructions). If you would prefer to interact with MCMRSimulator in Julia, you can find a tutorial doing the same analysis here.","category":"page"},{"location":"tutorial_cli/","page":"Tutorial (CLI)","title":"Tutorial (CLI)","text":"The command line tool requires one or more MRI sequence definitions as input. These can be supplied as pulseq files, such as those produced by MRIBuilder.jl.","category":"page"},{"location":"tutorial_cli/","page":"Tutorial (CLI)","title":"Tutorial (CLI)","text":"In general, running a simulation will consist of the following two steps:","category":"page"},{"location":"tutorial_cli/","page":"Tutorial (CLI)","title":"Tutorial (CLI)","text":"Creating a geometry using one or more calls to mcmr geometry (full description).\nRunning the actual simulation using mcmr run.","category":"page"},{"location":"tutorial_cli/","page":"Tutorial (CLI)","title":"Tutorial (CLI)","text":"We will look through each of these steps below.","category":"page"},{"location":"tutorial_cli/#Defining-the-geometry","page":"Tutorial (CLI)","title":"Defining the geometry","text":"","category":"section"},{"location":"tutorial_cli/","page":"Tutorial (CLI)","title":"Tutorial (CLI)","text":"First we will define a geometry formed of regularly packed axons. This is represented by a single cylinder pointing in the z-direction with a radius of 1 micrometer that repeats itself every 2.5 micrometer (in both the x-, and y-direction).","category":"page"},{"location":"tutorial_cli/","page":"Tutorial (CLI)","title":"Tutorial (CLI)","text":"mcmr geometry create cylinders 1 geometry.json --radius 1 --repeats 2.5,2.5","category":"page"},{"location":"tutorial_cli/","page":"Tutorial (CLI)","title":"Tutorial (CLI)","text":"import MCMRSimulator.CLI: run_main_docs\nrun_main_docs(\"geometry create cylinders 1 geometry.json --radius 1 --repeats 2.5,2.5\")","category":"page"},{"location":"tutorial_cli/","page":"Tutorial (CLI)","title":"Tutorial (CLI)","text":"This will create a JSON file with the full information on the geometry:","category":"page"},{"location":"tutorial_cli/","page":"Tutorial (CLI)","title":"Tutorial (CLI)","text":"import Markdown\ntext = read(\"geometry.json\", String)\nMarkdown.parse(\"```json\\n$(text)\\n```\")","category":"page"},{"location":"tutorial_cli/","page":"Tutorial (CLI)","title":"Tutorial (CLI)","text":"You can see how that the repeats and radius keywords have been set to our predefined values. You can alter these and other geometry properties by editing this JSON directly or using the flags when creating the geometry. For a full overview of these flags, you can run:","category":"page"},{"location":"tutorial_cli/","page":"Tutorial (CLI)","title":"Tutorial (CLI)","text":"mcmr geometry create cylinders --help","category":"page"},{"location":"tutorial_cli/","page":"Tutorial (CLI)","title":"Tutorial (CLI)","text":"import MCMRSimulator.CLI: run_main_docs\nrun_main_docs(\"geometry create cylinders --help\")","category":"page"},{"location":"tutorial_cli/","page":"Tutorial (CLI)","title":"Tutorial (CLI)","text":"How these various properties affect the simulation is described here.","category":"page"},{"location":"tutorial_cli/","page":"Tutorial (CLI)","title":"Tutorial (CLI)","text":"The procedure to create Walls, Spheres, or Annuli is very similar as for the Cylinders illustrated above. Randomly distributed cylinders, annuli, and spheres can be created using mcmr geometry create-random.","category":"page"},{"location":"tutorial_cli/#Defining-the-sequence","page":"Tutorial (CLI)","title":"Defining the sequence","text":"","category":"section"},{"location":"tutorial_cli/","page":"Tutorial (CLI)","title":"Tutorial (CLI)","text":"In this case we will use an idealised DWI sequence produced by MRIBuilder.jl. Note that any pulseq file can be used instead.","category":"page"},{"location":"tutorial_cli/","page":"Tutorial (CLI)","title":"Tutorial (CLI)","text":"using MRIBuilder\nseq = DWI(TE=80, bval=2., Δ=40, δ=:min, TR=2000)\nwrite_sequence(\"dwi.seq\", seq)\n\n# Optional to plot the sequence\nusing CairoMakie\nf = plot_sequence(seq)\nf\nsave(\"tutorial_cli_sequence.png\", f); # hide\nnothing # hide","category":"page"},{"location":"tutorial_cli/","page":"Tutorial (CLI)","title":"Tutorial (CLI)","text":"(Image: )","category":"page"},{"location":"tutorial_cli/#Running-the-simulation","page":"Tutorial (CLI)","title":"Running the simulation","text":"","category":"section"},{"location":"tutorial_cli/","page":"Tutorial (CLI)","title":"Tutorial (CLI)","text":"To get instructions on running the simulations, we can check the help message of mcmr run:","category":"page"},{"location":"tutorial_cli/","page":"Tutorial (CLI)","title":"Tutorial (CLI)","text":"mcmr run --help","category":"page"},{"location":"tutorial_cli/","page":"Tutorial (CLI)","title":"Tutorial (CLI)","text":"import MCMRSimulator.CLI: run_main_docs\nrun_main_docs(\"run --help\")","category":"page"},{"location":"tutorial_cli/","page":"Tutorial (CLI)","title":"Tutorial (CLI)","text":"We can see that in addition to defining the geometry and the sequence, we can also control the simulation properties such as the --diffusivity, --R1, and --R2.","category":"page"},{"location":"tutorial_cli/","page":"Tutorial (CLI)","title":"Tutorial (CLI)","text":"The simulation is initialised by randomly distributing a number of spins (set by --Nspins) uniformly across a bounding box with size given by --voxel-size. This initial state might also contain bound spins (if the --density flag was set to a non-zero value during the geometry generation).","category":"page"},{"location":"tutorial_cli/","page":"Tutorial (CLI)","title":"Tutorial (CLI)","text":"The DWI sequence defined above contains a MRIBuilder.SingleReadout object at the echo time (80 ms). By default, this is used for readout:","category":"page"},{"location":"tutorial_cli/","page":"Tutorial (CLI)","title":"Tutorial (CLI)","text":"mcmr run geometry.json dwi.seq -o signal.csv","category":"page"},{"location":"tutorial_cli/","page":"Tutorial (CLI)","title":"Tutorial (CLI)","text":"import MCMRSimulator.CLI: run_main_docs\nrun_main_docs(\"run geometry.json dwi.seq -o signal.csv --seed=1\")","category":"page"},{"location":"tutorial_cli/","page":"Tutorial (CLI)","title":"Tutorial (CLI)","text":"This produces the CSV file, which looks like","category":"page"},{"location":"tutorial_cli/","page":"Tutorial (CLI)","title":"Tutorial (CLI)","text":"import Markdown\ntext = read(\"signal.csv\", String)\nMarkdown.parse(\"```\\n$(text)\\n```\")","category":"page"},{"location":"tutorial_cli/","page":"Tutorial (CLI)","title":"Tutorial (CLI)","text":"The columns in this file store the following information:","category":"page"},{"location":"tutorial_cli/","page":"Tutorial (CLI)","title":"Tutorial (CLI)","text":"\"sequence\": integer; index of the sequence (always 1 if only single sequence used)\n\"bvec\": integer; index of the gradient orientation (if a --bvec flag is provided)\n\"TR\": integer; index of the repetition time that this data was acquired (between 1 and the value of --nTR)\n\"readout\": integer; index of the readout within a TR.\n\"subset\": integer; index of the subset of the total signal (e.g., intra-axonal) that has been output (see the --subset flag). The total signal will always be included with \"subset\" of 0.\n\"nspins\": total number of spins contributing to the signal (might change for certain subsets of spins)\n\"longitudinal\": average longitudinal signal\n\"transverse\": average transverse signal\n\"phase\": average phase of the signal (in degrees)\n\"Sx\": signal strength in the x-direction\n\"Sy\": signal strength in the y-direction","category":"page"},{"location":"tutorial_cli/","page":"Tutorial (CLI)","title":"Tutorial (CLI)","text":"We can also output the signal of specific subsets of spins. For example, in the following we request to separately the output for just the spins inside the cylinders and just the spins outside of the cylinders.","category":"page"},{"location":"tutorial_cli/","page":"Tutorial (CLI)","title":"Tutorial (CLI)","text":"mcmr run geometry.json dwi.seq -o signal.csv --subset inside --subset outside","category":"page"},{"location":"tutorial_cli/","page":"Tutorial (CLI)","title":"Tutorial (CLI)","text":"import MCMRSimulator.CLI: run_main_docs\nrun_main_docs(\"run geometry.json dwi.seq -o signal2.csv --subset inside --subset outside --seed=2\")","category":"page"},{"location":"tutorial_cli/","page":"Tutorial (CLI)","title":"Tutorial (CLI)","text":"We can see two additional rows in the output.  These new rows are the in same order as the --subset flags provided to mcmr run and can be distinguished based on the \"subset\" column.","category":"page"},{"location":"tutorial_cli/","page":"Tutorial (CLI)","title":"Tutorial (CLI)","text":"import Markdown\ntext = read(\"signal2.csv\", String)\nMarkdown.parse(\"```\\n$(text)\\n```\")","category":"page"},{"location":"tutorial_cli/","page":"Tutorial (CLI)","title":"Tutorial (CLI)","text":"We can see in the second row that inside the cylinders the transverse signal is very close to the number of spins,  indicating that there has been very little dephasing due to the diffusion weighting inside the cylinders. On the other hand, we did lose most of the signal outside of the cylinders (i.e., the transverse signal is much lower than the number of spins in the third row). All the spins are either inside or outside the cylinders, so in this case the first row is simply the sum of the next two.","category":"page"},{"location":"tutorial_cli/","page":"Tutorial (CLI)","title":"Tutorial (CLI)","text":"A more complete state of all the spins can be produced using the --output-snapshot flag. For example, the command","category":"page"},{"location":"tutorial_cli/","page":"Tutorial (CLI)","title":"Tutorial (CLI)","text":"mcmr run geometry.json dwi.seq --output-snapshot snapshot.csv","category":"page"},{"location":"tutorial_cli/","page":"Tutorial (CLI)","title":"Tutorial (CLI)","text":"import MCMRSimulator.CLI: run_main_docs\nrun_main_docs(\"run geometry.json dwi.seq --output-snapshot snapshot.csv --seed=3\")","category":"page"},{"location":"tutorial_cli/","page":"Tutorial (CLI)","title":"Tutorial (CLI)","text":"will produce a file named \"snapshot.csv\" with:","category":"page"},{"location":"tutorial_cli/","page":"Tutorial (CLI)","title":"Tutorial (CLI)","text":"import Markdown\nlines = split(read(\"snapshot.csv\", String), '\\n')\ntext = join(lines[1:5], '\\n')\nMarkdown.parse(\"```csv\\n$(text)\\n...\\n```\")","category":"page"},{"location":"tutorial_cli/","page":"Tutorial (CLI)","title":"Tutorial (CLI)","text":"Each row corresponds to the state of a single spin. In addition to all the columns listed above, we now have 4 more columns:","category":"page"},{"location":"tutorial_cli/","page":"Tutorial (CLI)","title":"Tutorial (CLI)","text":"\"spin\": integer; index of the spin\n\"x\"/\"y\"/\"z\": floats; position of the spin at the time of the readout","category":"page"},{"location":"tutorial_cli/","page":"Tutorial (CLI)","title":"Tutorial (CLI)","text":"The readout times can be adjusted using the --nTR, --time, and --skip-TR flags.","category":"page"},{"location":"properties/#properties","page":"MRI/collision properties","title":"Simulation properties","text":"","category":"section"},{"location":"properties/","page":"MRI/collision properties","title":"MRI/collision properties","text":"How the spins behave is determined by the tissue geometry, the applied MRI sequences, and user-provided flags determining how the spin magnetisation evolves. Here we discuss how the spin magnetisation evolution can be affected by these user-provided flags.","category":"page"},{"location":"properties/","page":"MRI/collision properties","title":"MRI/collision properties","text":"For example, one such flag is the diffusivity, which can be set as a keyword argument while generating the Simulation.","category":"page"},{"location":"properties/#MRI-properties","page":"MRI/collision properties","title":"MRI properties","text":"","category":"section"},{"location":"properties/","page":"MRI/collision properties","title":"MRI/collision properties","text":"MRI properties determine the spin evolution for free and stuck particles. They include:","category":"page"},{"location":"properties/","page":"MRI/collision properties","title":"MRI/collision properties","text":"the longitudinal relaxation rate R1\nthe transverse relaxation rate R2\nthe global off_resonance field (i.e., any off-resonance not caused by the sequence or the geometry)","category":"page"},{"location":"properties/","page":"MRI/collision properties","title":"MRI/collision properties","text":"At the Simulation level these parameters can be set by supplying the R1, R2, or off_resonance flags (see GlobalProperties), such as:","category":"page"},{"location":"properties/","page":"MRI/collision properties","title":"MRI/collision properties","text":"simulation = Simulation(sequences, R2=1/80)","category":"page"},{"location":"properties/","page":"MRI/collision properties","title":"MRI/collision properties","text":"These MRI properties can be locally altered when defining the geometry. In the geometry they can be seperately set for spins stuck to the geometry surface or those spins that are inside specific objects in the geometry. The total relaxation rate (and off-resonance field) is set by the sum of the global value, the value set for any surface the spin is stuck to, and the value set for any obstruction that the spin is inside of. A single spin might be inside of multiple obstructions at once, if they overlap. In that case, all of the overlapping compartments will be considered. For the off-resonance field there might also be a contribution of the magnetic suscpetibility of any Cylinders, Annuli, or Mesh.","category":"page"},{"location":"properties/","page":"MRI/collision properties","title":"MRI/collision properties","text":"If not set at the global or local level, there will be no longitudinal or transverse relaxation and there will be no off-resonance field.","category":"page"},{"location":"properties/","page":"MRI/collision properties","title":"MRI/collision properties","text":"From the command line interface, the global parameters are set during the mcmr run command using --diffusivity, --R1, and --R2 keywords. Local parameters will already have been set at an earlier stage during the creation of the geometry using mcmr geometry create/create-random.","category":"page"},{"location":"properties/#Collision-properties","page":"MRI/collision properties","title":"Collision properties","text":"","category":"section"},{"location":"properties/","page":"MRI/collision properties","title":"MRI/collision properties","text":"Collision properties determine the behaviour of spins at the time of a collision. Like MRI properties they can be set at the global level (while creating Simulation) or overwritten at the local level (geometry). There are four such properties:","category":"page"},{"location":"properties/","page":"MRI/collision properties","title":"MRI/collision properties","text":"MCMRSimulator.surface_relaxivity: the fraction of transverse signal lost (and longitudinal signal regained) at every collision. This fraction is adjusted to take into account the timestep (see MCMRSimulator.correct_for_timestep). Note that this is not the recommended way to model magnetisation transfer. Instead, we recommend using the surface_density as discussed below.\nMCMRSimulator.permeability: the probability of the spin passing through the surface. If the spins do not pass through, they will undergo regular reflection (or get stuck, see below). Like MT_fraction it will be adjusted to take into account the timestep (see MCMRSimulator.correct_for_timestep).\nMCMRSimulator.surface_density and MCMRSimulator.dwell_time: These control the density and dwell time of spins on the surface. Depending on the MRI properties assigned to these stuck particles (see above), these stuck particles can be used to represent water stuck at the membranes due to surface tension or spins in the membrane itself (which is in exchange with the free water through magnetisation transfer).","category":"page"},{"location":"installation/#installation","page":"Installation","title":"Installation","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"MCMRSimulator is an application written in the Julia language. You can run simulations either directly from the Julia REPL, in a Jupyter notebook, or using the command line interface.","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"For now, it is only possible to install MCMRSimulator using the built-in Julia package manager.  In the future, we will also provide docker and singularity images to make it possible to run the command line interface without installing julia.","category":"page"},{"location":"installation/#global_julia","page":"Installation","title":"Global Julia installation","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"First install julia from the official website.\nChoose a directory, where you will install MCMRSimulator. If you want to install a single version of MCMRSimulator, this might just be any folder in your home directory. If you want to associate the MCMRSimulator with a specific project, you might want to select a directory within that project. We will refer to this chosen directory below as \"<project_dir>\".\nStart the julia REPL in a terminal ($ julia --project=<project_dir>).\nEnter the package manager by pressing \"]\"\nInstall MCMRSimulator.jl using pkg> add https://git.fmrib.ox.ac.uk/ndcn0236/mcmrsimulator.jl.git.\n(Optional) Install one of the Makie backends for plotting (e.g., pkg> add CairoMakie).\n(Optional) If you want to use a Jupyter notebook, you will also have to install IJulia. You can find instructions to do so at https://github.com/JuliaLang/IJulia.jl.\nPress \"[backspace]\" to leave the package manager.\n(Optional) To install the MCMRSimulator command line interface (CLI) run the following in the main julia REPL: using MCMRSimulator; MCMRSimulator.install_cli(destdir=\"...\"), where destdir is the target directory for the executable (called mcmr by default). Ensure that the destdir is a directory that is in your PATH variable.","category":"page"},{"location":"installation/#Running-MCMRSimulator","page":"Installation","title":"Running MCMRSimulator","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"After this installation process, you can run MCMRSimulator in one of the following ways:","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"Julia REPL: Start the REPL in a terminal by typing $ julia --project=<project_dir>. Afterwards type using MCMRSimulator to import the simulator. You can now follow the steps in the MCMRSimulator tutorial using Julia.\nJupyter notebook: Make sure that you install IJulia using the instructions above. This will allow you to start a notebook in jupyter running in Julia. Within this notebook, you can follow the steps in the MCMRSimulator tutorial using Julia.\nCommand line interface: If you followed the instructions in step 4 above, you can run the MCMRSimulator command line interface simply by typing mcmr in the terminal. If it is not working, you might want to redo step 4 above and pay attention to any warning messages. With this alias set up, you can now follow the command line tutorial.","category":"page"},{"location":"installation/#Updating-MCMRSimulator","page":"Installation","title":"Updating MCMRSimulator","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"First check the changelog to find a list of changes since your current version. If you decide to update:","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"Start the julia REPL again in a terminal ($ julia --project=<project_dir>)\nEnter the package manager by pressing \"]\"\nUpdate all installed packages using by typing update and pressing enter (pkg> update).","category":"page"},{"location":"installation/#Sharing-your-MCMRSimulator-installation","page":"Installation","title":"Sharing your MCMRSimulator installation","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"To share the exact environment used by your installation of MCMRSimulator, simply go to the <project_dir> directory and locate the files named \"Project.toml\" and \"Manifest.toml\". Transfer these files to any other computer, to ensure that they install the exact same version of all Julia packages used (see https://pkgdocs.julialang.org/v1/environments/ for more details).","category":"page"},{"location":"tutorial_julia/#tutorial_julia","page":"Tutorial (Julia)","title":"Tutorial","text":"","category":"section"},{"location":"tutorial_julia/","page":"Tutorial (Julia)","title":"Tutorial (Julia)","text":"This tutorial will walk through an example of modelling the MRI signal evolution for a diffusion-weighted sequence. The spins in this simulation will be constrained by regularly packed cylinders. This tutorial will use the programatic Julia interface, which you can run in the Julia REPL or in a Jupyter notebook. If you would prefer to use the command line interface, you can find a tutorial doing the same analysis here.","category":"page"},{"location":"tutorial_julia/","page":"Tutorial (Julia)","title":"Tutorial (Julia)","text":"After installation we can load MCMRSimulator.jl using","category":"page"},{"location":"tutorial_julia/","page":"Tutorial (Julia)","title":"Tutorial (Julia)","text":"using MCMRSimulator\nusing CairoMakie  # used for plotting; use GLMakie or WGLMakie for interactive plots\nupdate_theme!(Theme(Axis=(xgridvisible=false, ygridvisible=false))) # hide grid lines","category":"page"},{"location":"tutorial_julia/","page":"Tutorial (Julia)","title":"Tutorial (Julia)","text":"In general, running a simulation will consist of the following three steps:","category":"page"},{"location":"tutorial_julia/","page":"Tutorial (Julia)","title":"Tutorial (Julia)","text":"Defining the microstructure and one or more sequences by creating an appropriate Simulation object.\nInitialising Snapshot with one or more Spin objects.\nSimulating a random walk of the spins through the microstructure and the MR signal produced by those spins.\nPlotting the MR signal or storing it to disk.","category":"page"},{"location":"tutorial_julia/","page":"Tutorial (Julia)","title":"Tutorial (Julia)","text":"We will look through each of these steps below.","category":"page"},{"location":"tutorial_julia/#Defining-the-simulation","page":"Tutorial (Julia)","title":"Defining the simulation","text":"","category":"section"},{"location":"tutorial_julia/","page":"Tutorial (Julia)","title":"Tutorial (Julia)","text":"The first step is to define the environment through which the spins will evolve. We will do so by creating an appropriate Simulation object. This Simulation will contain information on the microstructure, how spins interact with that microstructure, and the enabled sequence(s).","category":"page"},{"location":"tutorial_julia/","page":"Tutorial (Julia)","title":"Tutorial (Julia)","text":"These different steps are described in more detail in other sections of this documentation:","category":"page"},{"location":"tutorial_julia/","page":"Tutorial (Julia)","title":"Tutorial (Julia)","text":"How to define the microstrutural geometry\nControlling spin behaviour","category":"page"},{"location":"tutorial_julia/","page":"Tutorial (Julia)","title":"Tutorial (Julia)","text":"For a discussion on sequence generation see MRIBuilder.jl.","category":"page"},{"location":"tutorial_julia/","page":"Tutorial (Julia)","title":"Tutorial (Julia)","text":"First we will define a geometry formed of regularly packed axons. This is represented by a single cylinder with a radius of 1 micrometer that repeats itself every 2.5 micrometer (in both the x-, and y-direction).","category":"page"},{"location":"tutorial_julia/","page":"Tutorial (Julia)","title":"Tutorial (Julia)","text":"import Random; Random.seed!(1) # hide\ngeometry = Cylinders(radius=1., repeats=[2.5, 2.5])\n\nf = plot(PlotPlane(size=5), geometry)\nxlims!(f.axis, -2.5, 2.5)\nylims!(f.axis, -2.5, 2.5)\nf\nsave(\"tutorial_geometry.png\", f) # hide\nnothing # hide","category":"page"},{"location":"tutorial_julia/","page":"Tutorial (Julia)","title":"Tutorial (Julia)","text":"(Image: )","category":"page"},{"location":"tutorial_julia/","page":"Tutorial (Julia)","title":"Tutorial (Julia)","text":"More complicated geometries can be generated as described here. More details on plotting geometries can be found in the plot_geometry documentation.","category":"page"},{"location":"tutorial_julia/","page":"Tutorial (Julia)","title":"Tutorial (Julia)","text":"The next step is to define a sequence using MRIBuilder.jl.  Here we will adopt a single diffusion-weighted MRI sequence.","category":"page"},{"location":"tutorial_julia/","page":"Tutorial (Julia)","title":"Tutorial (Julia)","text":"using MRIBuilder\nsequence = DWI(bval=2., TE=80, TR=300, scanner=Siemens_Prisma)\nf = plot_sequence(sequence)\nf\nsave(\"tutorial_sequence.png\", f); # hide\nnothing # hide","category":"page"},{"location":"tutorial_julia/","page":"Tutorial (Julia)","title":"Tutorial (Julia)","text":"(Image: ) More details on plotting sequences can be found in the plot_sequence documentation.","category":"page"},{"location":"tutorial_julia/","page":"Tutorial (Julia)","title":"Tutorial (Julia)","text":"Once we have both a geometry and one or more sequences, we can put them together in a Simulation object:","category":"page"},{"location":"tutorial_julia/","page":"Tutorial (Julia)","title":"Tutorial (Julia)","text":"simulation = Simulation(sequence, R2=0.012, R1=3e-3, diffusivity=2., off_resonance=0.1, geometry=geometry)\nnothing # hide","category":"page"},{"location":"tutorial_julia/","page":"Tutorial (Julia)","title":"Tutorial (Julia)","text":"By default there is no T1 or T2 relaxation and a diffusivity of 3 um^2/ms. Enabling spin relaxation and diffusion requires setting the appropriate parameters in the Simulation as seen here. The spin relaxation rates can be different in different compartments as described here.","category":"page"},{"location":"tutorial_julia/#Initialising-the-simulation","page":"Tutorial (Julia)","title":"Initialising the simulation","text":"","category":"section"},{"location":"tutorial_julia/","page":"Tutorial (Julia)","title":"Tutorial (Julia)","text":"The current state of the simulation at any time is given by a Snapshot object. This is essentially a vector of Spin objects with a time stamp. Each Spin represents a single diffusing particle. Besides containing its current position, it also contains its contribution to the MR signal for each of the sequences in the simulation and whether it is stuck on any surfaces.","category":"page"},{"location":"tutorial_julia/","page":"Tutorial (Julia)","title":"Tutorial (Julia)","text":"The recommended way to initialise is to call Snapshot(<number of spins>, <simulation>, [bounding_box]). This will create randomly distributed spins within some BoundingBox. By default this bounding box is an isotropic voxel with a size of 1 mm centered on the origin.","category":"page"},{"location":"tutorial_julia/","page":"Tutorial (Julia)","title":"Tutorial (Julia)","text":"After initialisation or after running the simulation, the Snapshot can be later filtered to include only spins inside/outside specific compartments or only include free/bound spins using [get_subset].","category":"page"},{"location":"tutorial_julia/","page":"Tutorial (Julia)","title":"Tutorial (Julia)","text":"The simulation can also be initialised explicitly using a sequence of positions (i.e., length-3 vectors) with the initial spin positions.  Note that such a simulation will start with all spins free and not necessarily randomly distributed, which means it might take some time to reach an equilibrium.","category":"page"},{"location":"tutorial_julia/","page":"Tutorial (Julia)","title":"Tutorial (Julia)","text":"For each of these initialisations the initial magnetisation can be explicitly set using the transverse, longitudinal, and phase flags. The default is for spins to start in equilibrium (i.e., transverse magnetisation of 0 and longitudinal magnetisation of 1).","category":"page"},{"location":"tutorial_julia/","page":"Tutorial (Julia)","title":"Tutorial (Julia)","text":"Finally, one could start a simulation using a Snapshot from a previous simulation.","category":"page"},{"location":"tutorial_julia/","page":"Tutorial (Julia)","title":"Tutorial (Julia)","text":"note: Deterministic spins\nEach Spin is assigned a random number state at creation, which will be used for its future evolution. This means that after creation of a spin or a Snapshot its future is fully determined. This ensures that when a spin is evolved through the same simulation multiple times, it sill follow the same path each time. This allows improved comparisons between simulations with the same geometry, but different sequences/physics. However, it can lead to confusing results (e.g., a simulation initialised with fill(Spin(), 500) will contain 500 spins all following the exact same path).","category":"page"},{"location":"tutorial_julia/#Running-the-simulation","page":"Tutorial (Julia)","title":"Running the simulation","text":"","category":"section"},{"location":"tutorial_julia/","page":"Tutorial (Julia)","title":"Tutorial (Julia)","text":"The main way to run a simulation is by calling readout. This function takes a Snapshot and a Simulation as input (or a number of spins, which will be used to generate a new Snapshot on the fly). There are various ways to define when the output will be read out (as described in the readout documentation).","category":"page"},{"location":"tutorial_julia/","page":"Tutorial (Julia)","title":"Tutorial (Julia)","text":"Here, we will illustrate various examples of using this function:","category":"page"},{"location":"tutorial_julia/#Simple-signal-readouts","page":"Tutorial (Julia)","title":"Simple signal readouts","text":"","category":"section"},{"location":"tutorial_julia/","page":"Tutorial (Julia)","title":"Tutorial (Julia)","text":"Most sequences will contain one or more MRIBuilder.SingleReadout or MRIBuilder.ADC objects, which define when the sequence will be read out during each repetition time (TR). To get the signal at this time, we can simply call:","category":"page"},{"location":"tutorial_julia/","page":"Tutorial (Julia)","title":"Tutorial (Julia)","text":"readout(1000, simulation)","category":"page"},{"location":"tutorial_julia/","page":"Tutorial (Julia)","title":"Tutorial (Julia)","text":"This signal is not truely representative from what we expect in a true diffusion-weighted MRI sequence, because the longitudinal signal has not had a chance to relax across multiple repetition times. To see what the signal will look like after such equilibriation, we can delay our readout with several TRs:","category":"page"},{"location":"tutorial_julia/","page":"Tutorial (Julia)","title":"Tutorial (Julia)","text":"readout(1000, simulation, skip_TR=5)","category":"page"},{"location":"tutorial_julia/","page":"Tutorial (Julia)","title":"Tutorial (Julia)","text":"In addition, to the total signal, we can also get the signal associated with individual compartments:","category":"page"},{"location":"tutorial_julia/","page":"Tutorial (Julia)","title":"Tutorial (Julia)","text":"readout(1000, simulation, subset=[Subset(inside=true), Subset(inside=false)])","category":"page"},{"location":"tutorial_julia/","page":"Tutorial (Julia)","title":"Tutorial (Julia)","text":"Note that we now get two signal outputs. The first respresents the signal within the cylinders, which is very close to number of spins,  indicating that there has been very little dephasing due to the diffusion weighting inside the cylinders. On the other hand, we did lose most of the signal outside of the cylinders. All the spins are either inside or outside the cylinders, so in this case the first row is simply the sum of the next two.","category":"page"},{"location":"tutorial_julia/","page":"Tutorial (Julia)","title":"Tutorial (Julia)","text":"Instead of just running the simulation for multiple TRs without readouts,  we could also visualise the equilibriation process by outputting the signal for multiple TRs:","category":"page"},{"location":"tutorial_julia/","page":"Tutorial (Julia)","title":"Tutorial (Julia)","text":"signals = readout(1000, simulation, nTR=6)\nf = lines(longitudinal.(signals))\nlines!(transverse.(signals))\nf\nsave(\"tutorial_equil.png\") # hide\nnothing # hide","category":"page"},{"location":"tutorial_julia/","page":"Tutorial (Julia)","title":"Tutorial (Julia)","text":"At each timepoint readout by default will return the total MR signal (for each sequence) as a SpinOrientation object. From this one can estimate the transverse component, the longitudinal component, and the phase. The longitudinal and transverse functions are used above to get those respective components.","category":"page"},{"location":"tutorial_julia/","page":"Tutorial (Julia)","title":"Tutorial (Julia)","text":"We can also override, when the signal will be read out, by passing on the readout times as a third argument to readout. Here we use this to plot the actual transverse signal evolution.","category":"page"},{"location":"tutorial_julia/","page":"Tutorial (Julia)","title":"Tutorial (Julia)","text":"times = 0:0.1:100\n# simulate 3000 spins for a single repetition time\naverage_signals = readout(3000, simulation, times, skip_TR=5)\nf = lines(times, transverse.(average_signals)/3000.)\nxlims!(0, 100)\nf\nsave(\"tutorial_transverse.png\", f) # hide\nnothing # hide","category":"page"},{"location":"tutorial_julia/","page":"Tutorial (Julia)","title":"Tutorial (Julia)","text":"(Image: )","category":"page"},{"location":"tutorial_julia/","page":"Tutorial (Julia)","title":"Tutorial (Julia)","text":"Note that by plotting the Sequence as well, we make the signal evolution a lot easier to interpret.","category":"page"},{"location":"tutorial_julia/#Reading-out-the-full-snapshot","page":"Tutorial (Julia)","title":"Reading out the full snapshot","text":"","category":"section"},{"location":"tutorial_julia/","page":"Tutorial (Julia)","title":"Tutorial (Julia)","text":"Instead of returning just the total signal readout can also return the full spin state in a Snapshot object by setting the return_snapshot keyword to true. Note that this is very memory intensive, so is only recommended when you only output a small number of timepoints or a small number of spins.","category":"page"},{"location":"tutorial_julia/","page":"Tutorial (Julia)","title":"Tutorial (Julia)","text":"Here, we use this to visualise the trajectory of spins through the geometry. To plot the trajectory we first need to output the state of the all spins at a high temporal resolution:","category":"page"},{"location":"tutorial_julia/","page":"Tutorial (Julia)","title":"Tutorial (Julia)","text":"# Simulate 2 spins with given starting positions for 3 ms\nsnapshots = readout([[0, 0, 0], [1, 1, 0]], simulation, 0:0.01:3., return_snapshot=true)\n\npp = PlotPlane(size=5.)\nf = plot(pp, geometry)\nplot(pp, snapshots)\nf\nsave(\"tutorial_trajectory2D.png\", f) # hide\nnothing # hide","category":"page"},{"location":"tutorial_julia/","page":"Tutorial (Julia)","title":"Tutorial (Julia)","text":"(Image: ) In this plot the color at each timepoint encodes the spin orientation. The brightness of the spin indicates the size of the transverse component with purely longitudinal spins being in black. The color of the spin encodes the phase of the MR signal in the transverse plane.","category":"page"},{"location":"tutorial_julia/","page":"Tutorial (Julia)","title":"Tutorial (Julia)","text":"The trajectories can also be plotted in 3D:","category":"page"},{"location":"tutorial_julia/","page":"Tutorial (Julia)","title":"Tutorial (Julia)","text":"f = plot(snapshots)\nsave(\"tutorial_trajectory3D.png\", f) # hide\nnothing # hide","category":"page"},{"location":"tutorial_julia/","page":"Tutorial (Julia)","title":"Tutorial (Julia)","text":"(Image: ) More details on plotting trajectories can be found in the plot_trajectory documentation.","category":"page"},{"location":"tutorial_julia/","page":"Tutorial (Julia)","title":"Tutorial (Julia)","text":"We can also use this future to plot the complete Snapshot at a specific time.  In this example we do not set this time explicitly, so it will default to the time of the sequence MRIBuilder.SingleReadout/MRIBuilder.ADC as discussed above:","category":"page"},{"location":"tutorial_julia/","page":"Tutorial (Julia)","title":"Tutorial (Julia)","text":"snapshot = readout(3000, simulation, return_snapshot=true)\npp = PlotPlane(size=2.5)\nf = plot(pp, snapshot)\nplot!(pp, geometry)\nf\nsave(\"tutorial_snapshot.png\", f) # hide\nnothing # hide","category":"page"},{"location":"tutorial_julia/","page":"Tutorial (Julia)","title":"Tutorial (Julia)","text":"(Image: ) We can see that the spins within the cylinder stay far more in-sync with each other (i.e., they have a more uniform colour), than those outside of the cylinder.","category":"page"},{"location":"tutorial_julia/","page":"Tutorial (Julia)","title":"Tutorial (Julia)","text":"Note that object returned when return_snapshot=true is the same Snapshot object as was used to initialise this simulation. This means that it can be used as an initialisation for future simulations.","category":"page"},{"location":"tutorial_julia/","page":"Tutorial (Julia)","title":"Tutorial (Julia)","text":"One complication with this occurs when running a Simulation with multiple sequences. Often, these different sequences will readout at different times. So, each Snapshot object returned by readout will only contain the spin magnetisation of the sequence that is readout at that particular time. To get a Snapshot object with the spin states for all sequences, you can use the evolve function instead.","category":"page"},{"location":"tutorial_julia/","page":"Tutorial (Julia)","title":"Tutorial (Julia)","text":"More details on plotting snapshots can be found in the plot_snapshot documentation. For example, the same snapshot can also be plotted using dyads or as an image:","category":"page"},{"location":"tutorial_julia/","page":"Tutorial (Julia)","title":"Tutorial (Julia)","text":"f = plot(pp, snapshot, kind=:dyad)\nplot!(pp, geometry)\nf\nsave(\"tutorial_snapshot_dyad.png\", f) # hide\nnothing # hide","category":"page"},{"location":"tutorial_julia/","page":"Tutorial (Julia)","title":"Tutorial (Julia)","text":"(Image: )","category":"page"},{"location":"tutorial_julia/","page":"Tutorial (Julia)","title":"Tutorial (Julia)","text":"f = plot(pp, snapshot, kind=:image)\nplot!(pp, geometry)\nf\nsave(\"tutorial_snapshot_image.png\", f) # hide\nnothing # hide","category":"page"},{"location":"tutorial_julia/","page":"Tutorial (Julia)","title":"Tutorial (Julia)","text":"(Image: )","category":"page"},{"location":"#Introduction","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"MCMRSimulator.jl allows simulation of MR signal generation using Monte Carlo simulations. The spin evolution of randomly diffusing particles is tracked under influence of one or more MR sequences. At present, the simulator allows to model","category":"page"},{"location":"","page":"Home","title":"Home","text":"Free diffusion and diffusion restricted by Walls, Cylinders, Spheres, and/or a triangular Mesh.\nR1 and R2 relaxation using global or local R1/R2 parameters.\nMR sequences consisting of arbitrary RF pulses, gradients, and readouts (built using MRIBuilder or read from pulseq files).\nOff-resonance magnetic field generation by myelinated cylinders or meshes.\nMagnetisation transfer between liquid spins and bound spins in membranes.\nMembrane permeability (i.e., exchange)\nSurface relaxation\nSurface tension of membranes causing spins to get temporarily \"stuck\" when they hit a membrane","category":"page"},{"location":"","page":"Home","title":"Home","text":"Future (potential) features:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Macromolecular pool not bound to the membrane\nOff-resonance field by iron particles\nContribution from metabolites (i.e., spectroscopy)","category":"page"},{"location":"","page":"Home","title":"Home","text":"warning: beta\nThis MR simulator is still under very active development and the API might still change substantially at any time!","category":"page"},{"location":"","page":"Home","title":"Home","text":"We use the following units throughout (unless otherwise noted):","category":"page"},{"location":"","page":"Home","title":"Home","text":"Times are in ms. Equivalently, RF pulse amplitudes and off-resonance magnetic fields are in kHz (i.e., 1/ms).\nPositions are in um. So, gradients are in kHz/um (not mT/m).\nAngles are in degrees (not radians). These are used for phases (of spins and RF pulses) as well as RF pulse flip angles. \nMagnetic susceptibilities are in parts per million (ppm).","category":"page"},{"location":"#How-to-get-started?","page":"Home","title":"How to get started?","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If MCMRSimulator is not yet installed, follow the installation instructions.\nLook through one of the tutorials. There are two available, depending on which interface you prefer to use:\nFor the command line interface: CLI tutorial.\nFor the julia interface: Julia tutorial.\nIf you want more information on a specific topic, you can check one of the more dedicated sections:\nGeometry.\nMRI & collision properties.\nFor sequences see MRIBuilder.jl.\nFull API.","category":"page"},{"location":"#Contributors","page":"Home","title":"Contributors","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The original simulator was written by Michiel Cottaar.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Other contributors:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Zhiyu Zheng","category":"page"},{"location":"#Movie-of-spins-moving-through-cylinders","page":"Home","title":"Movie of spins moving through cylinders","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"<iframe src=\"https://ox.cloud.panopto.eu/Panopto/Pages/Embed.aspx?id=b6211751-2743-4bb8-b65a-af5d011a8684&autoplay=true&offerviewer=false&showtitle=false&showbrand=false&captions=false&interactivity=none\" style=\"border: 1px solid #464646;\" allowfullscreen allow=\"autoplay\"></iframe>","category":"page"}]
}

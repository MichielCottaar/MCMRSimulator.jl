variables:
  JULIA_DEPOT_PATH: "$CI_PROJECT_DIR/.julia"
  CI: "true"

cache:
  paths:
    - .julia

.script:
  script:
    - apt-get update
    - apt-get install -y xvfb
    - |
      xvfb-run julia --project=@. -e '
        using Pkg
        Pkg.build()
        Pkg.test(coverage=true)'
.coverage:
  coverage: /Test coverage (\d+\.\d+%)/
  after_script:
    - |
      julia -e '
        using Pkg
        Pkg.add("Coverage")
        using Coverage
        c, t = get_summary(process_folder())
        using Printf
        @printf "Test coverage %.2f%%\n" 100c / t'
Julia 1.7:
  image: julia:1.7
  extends:
    - .script
    - .coverage
pages:
  image: julia:1.7
  script:
    - apt-get update
    - apt-get install -y git
    - |
      julia --project=docs -e '
        using Pkg
        Pkg.develop(PackageSpec(path=pwd()))
        Pkg.instantiate()
        using Documenter: doctest
        using MRSimulator
        doctest(MRSimulator)
        include("docs/make.jl")'
    - mkdir -p public
    - mv docs/build public/dev
  artifacts:
    paths:
      - public
  only:
    - main
benchmark-main:
  image: julia:1.7
  stage: deploy
  script:
    - apt-get update
    - apt-get install -y git
    - git remote -v
    - git fetch origin main
    - julia benchmark/run_benchmarks.jl origin/main
  except:
    - main
benchmark-version:
  image: julia:1.7
  stage: deploy
  script:
    - apt-get update
    - apt-get install -y git
    - VERSION=`julia -e "using TOML; println(TOML.parsefile(\"Project.toml\")[\"version\"])"`
    - git fetch origin v${VERSION}
    - julia benchmark/run_benchmarks.jl v${VERSION}
  only:
    - main


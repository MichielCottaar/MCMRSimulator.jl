include:
  - project: fsl/conda/fsl-ci-rules
    file:    .gitlab-ci.yml

stages:
  - build
  - test
  - fsl-ci-pre
  - fsl-ci-build
  - fsl-ci-test
  - fsl-ci-deploy

variables:
  JULIA_DEPOT_PATH: "$CI_PROJECT_DIR/.julia"
  CI: "true"

default:
  image: julia:latest
  tags:
    - docker

Pre-compile:
  stage: build
  script:
    - julia --project=@. -e "using Pkg; Pkg.build()"
    - julia -e 'using Pkg; Pkg.add("CairoMakie")'
  artifacts:
    paths:
      - .julia/
    expire_in: 2 hours
  rules:
    - if:   $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - if:   $CI_PROJECT_PATH =~ /^ndcn0236.*/
      when: always
    - when: never

Testing:
  script:
    - apt-get update
    - apt-get install -y xvfb
    - xvfb-run julia --project=@. -e 'using Pkg; Pkg.test(coverage=true)'
  after_script:
    - julia -e 'using Pkg; Pkg.add("Coverage"); using Coverage; c, t = get_summary(process_folder()); using Printf; @printf "Test coverage %.2f%%\n" 100c / t'
  timeout: 2h
  dependencies:
    - Pre-compile
  rules:
    - if:   $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - if:   $CI_COMMIT_TAG != null
      when: never
    - if:   $CI_PROJECT_PATH =~ /^ndcn0236.*/
      when: always
    - when: never

build_pages:
  script:
    - apt-get update
    - apt-get install -y git
    - julia --project=docs -e 'using Pkg; Pkg.develop(PackageSpec(path=pwd())); Pkg.instantiate(); include("docs/make.jl")'
  dependencies:
    - Pre-compile
  rules:
    - if:   $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - if:   $CI_PROJECT_PATH !~ /^ndcn0236.*/
      when: never
    - if:   $CI_COMMIT_REF_NAME == "main"
      when: always
    - if:   $CI_COMMIT_TAG != null
      when: always
    - when: never


# from https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#docker-alternatives
build:
  stage: build
  image: quay.io/buildah/stable
  variables:
    STORAGE_DRIVER: vfs
    BUILDAH_FORMAT: docker
    BUILDAH_ISOLATION: chroot
    FQ_IMAGE_NAME: "michielc/mcmr:latest"
  script:
    - buildah images
    - buildah manifest create mcmr
    - buildah build -t $FQ_IMAGE_NAME --manifest mcmr --arch amd64
    - buildah build -t $FQ_IMAGE_NAME --manifest mcmr --arch arm64
    - buildah images
    - buildah push mcmr docker://registry.hub.docker.com/$FQ_IMAGE_NAME --creds=$DOCKER_HUB_USER:$DOCKER_HUB_PASSWORD